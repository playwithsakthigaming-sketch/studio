{"file_contents":{"README.md":{"content":"# Firebase Studio\n\nThis is a NextJS starter in Firebase Studio.\n\nTo get started, take a look at src/app/page.tsx.\n","size_bytes":114},"apphosting.yaml":{"content":"# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  maxInstances: 1\n","size_bytes":270},"next.config.ts":{"content":"import type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  // Allow all hosts for Replit proxy\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Frame-Options',\n            value: 'ALLOWALL',\n          },\n        ],\n      },\n    ];\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'images.unsplash.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'picsum.photos',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'media.discordapp.net',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'cdn.discordapp.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'skit.ng',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'images-ext-1.discordapp.net',\n        port: '',\n        pathname: '/**',\n      }\n    ],\n  },\n};\n\nexport default nextConfig;\n","size_bytes":1399},"replit.md":{"content":"# Tamil Pasanga - Next.js Application\n\n## Overview\nThis is a Next.js application for \"Tamil Pasanga\" - a community website with features for events, news, staff management, gallery, and user applications. The project has been successfully imported and configured to run in the Replit environment.\n\n## Project Architecture\n- **Frontend Framework**: Next.js 15.3.3 with TypeScript\n- **UI Components**: Radix UI components with custom styling\n- **Styling**: Tailwind CSS with custom animations\n- **Image Handling**: Next.js Image optimization with remote patterns\n- **AI Integration**: Google AI Genkit integration\n- **Development Features**: Turbopack for fast development builds\n\n## Project Structure\n```\nsrc/\n├── app/            # Next.js App Router pages\n│   ├── admin/      # Admin dashboard for managing content\n│   ├── api/        # API routes\n│   ├── events/     # Events pages\n│   ├── gallery/    # Gallery pages\n│   ├── news/       # News pages\n│   └── staff/      # Staff pages\n├── components/     # Reusable UI components\n│   ├── app/        # Application-specific components\n│   └── ui/         # Generic UI components\n├── lib/            # Utilities and data files\n└── hooks/          # Custom React hooks\n```\n\n## Configuration\n- **Port**: Development server runs on port 5000\n- **Host**: Configured to bind to 0.0.0.0 for Replit compatibility\n- **Deployment**: Configured for autoscale deployment with build process\n\n## Recent Changes (September 25, 2025)\n- Installed all npm dependencies with legacy peer deps to resolve React version conflicts\n- Updated package.json dev script to bind to 0.0.0.0:5000\n- Configured Next.js to allow cross-origin requests for Replit proxy\n- Set up workflow for development server\n- Configured production deployment settings\n\n## Development Workflow\n- Start development: `npm run dev` (runs on port 5000)\n- Build for production: `npm run build`\n- Start production server: `npm start`\n- Type checking: `npm run typecheck`\n- Linting: `npm run lint`\n\n## External Dependencies\n- Uses external Discord images (some may return 404 if links have expired)\n- Google AI integration for enhanced features\n- Firebase integration for backend services\n\n## Known Issues\n- Some external Discord images return 404 (expected, as they're external links)\n- Cross-origin warnings in development (expected in Replit environment)\n- Minor image sizing warnings (non-critical UI issues)\n\n## Current Status\n✅ Dependencies installed and configured\n✅ Development server running successfully\n✅ Production deployment configured\n✅ Project ready for development and deployment","size_bytes":2685},"tailwind.config.ts":{"content":"import type {Config} from 'tailwindcss';\n\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        body: ['\"Josefin Sans\"', 'sans-serif'],\n        headline: ['\"Josefin Sans\"', 'sans-serif'],\n        code: ['monospace'],\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n        sidebar: {\n          DEFAULT: 'hsl(var(--sidebar-background))',\n          foreground: 'hsl(var(--sidebar-foreground))',\n          primary: 'hsl(var(--sidebar-primary))',\n          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n          accent: 'hsl(var(--sidebar-accent))',\n          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n          border: 'hsl(var(--sidebar-border))',\n          ring: 'hsl(var(--sidebar-ring))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n        'rgb-text': {\n          '0%': { 'background-position': '200% 0' },\n          '100%': { 'background-position': '-200% 0' },\n        },\n        'fade-in': {\n          'from': { opacity: '0' },\n          'to': { opacity: '1' },\n        },\n        'slide-up-fade': {\n          'from': { opacity: '0', transform: 'translateY(20px)' },\n          'to': { opacity: '1', transform: 'translateY(0)' },\n        },\n        'fade-in-scroll': {\n          'from': { opacity: '0' },\n          'to': { opacity: '1' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n        'rgb-text': 'rgb-text 6s linear infinite',\n        'fade-in': 'fade-in 1s ease-out forwards',\n        'slide-up-fade': 'slide-up-fade 0.8s ease-out forwards',\n        'fade-in-scroll': 'fade-in-scroll linear forwards',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n","size_bytes":3734},"docs/blueprint.md":{"content":"# **App Name**: Nexon Logistics Hub\n\n## Core Features:\n\n- Branded Hero Section: Showcase Nexon Logistics' branding with a truck image, slogan, and a prominent 'Apply' call-to-action button, linking to the application process.\n- Discord Integration Tool: Directly integrates with Discord to manage driver applications and community engagement using a tool to reason about application requirements.\n- Achievements Display: Display stat counters for key achievements: number of drivers, Discord members, and events attended, reinforcing Nexon's presence.\n- Driver Application Process: Guide users through a clear 3-step application process: Apply, Join Discord, and Interview, with prominent links and guidance.\n- Newsletter Integration: Showcase the latest newsletter issues with publish dates and authors, enhancing user engagement and demonstrating transparency.\n- Feature Showcase: Display core features such as 'Division', 'Contracts' and 'Marketplace' with simple cards in a grid layout. Each card includes an icon and description.\n\n## Style Guidelines:\n\n- Background color: Dark charcoal (#121212) for a sleek and modern feel.\n- Primary color: Bright green (#A4FF00) for interactive elements, conveying a sense of technology and action. \n- Accent color: Slightly lighter green (#C6FF57) used on hover states and focus states. \n- Font for headings: 'Poppins' (sans-serif) to maintain a bold, modern, and fashionable aesthetic.\n- Font for body text: 'Inter' (sans-serif) ensuring legibility and a clean user experience.\n- Line icons in bright green (#A4FF00) to maintain visual consistency.\n- Centered alignment with uniform padding and margin for a clean layout. Full-width hero section and multi-column grids for displaying content.\n- Subtle animations on button hover and scroll, powered by AOS.js or Framer Motion.","size_bytes":1820},"src/ai/dev.ts":{"content":"import { config } from 'dotenv';\nconfig();\n","size_bytes":43},"src/ai/genkit.ts":{"content":"import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n","size_bytes":172},"src/app/actions.ts":{"content":"\n'use server';\n\nimport { applicationSchema, type ApplicationData } from '@/lib/schemas';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport type { Application, ApplicationsData } from '@/lib/applications';\nimport { revalidatePath } from 'next/cache';\n\nconst applicationsFilePath = path.join(process.cwd(), 'src', 'lib', 'applications.json');\n\nasync function readApplications(): Promise<ApplicationsData> {\n    try {\n        const data = await fs.readFile(applicationsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { applications: [] };\n        }\n        throw error;\n    }\n}\n\nasync function writeApplications(data: ApplicationsData): Promise<void> {\n    await fs.writeFile(applicationsFilePath, JSON.stringify(data, null, 2));\n}\n\nexport type SubmitResult = {\n    success: boolean;\n    message: string;\n    applicationId?: string;\n    errors?: Record<string, string[] | undefined>;\n}\n\nfunction generateApplicationId() {\n    const randomNumber = Math.floor(Math.random() * 9000) + 1000;\n    return `TP-${randomNumber}`;\n}\n\nexport async function submitApplication(data: ApplicationData): Promise<SubmitResult> {\n    const validation = applicationSchema.safeParse(data);\n\n    if (!validation.success) {\n        return {\n            success: false,\n            message: 'Invalid form data.',\n            errors: validation.error.flatten().fieldErrors,\n        };\n    }\n\n    const applicationId = generateApplicationId();\n\n    const newApplication: Application = {\n        id: applicationId,\n        ...validation.data,\n        status: 'Pending',\n        submittedAt: new Date().toISOString(),\n    };\n\n    try {\n        const applicationsData = await readApplications();\n        applicationsData.applications.unshift(newApplication);\n        await writeApplications(applicationsData);\n        revalidatePath('/admin/applications');\n    } catch (error) {\n        console.error('Error saving application:', error);\n        return { success: false, message: 'Server error: Could not save application.' };\n    }\n\n    const { name, discordTag, email, steamUrl, experience, howYouFound, friendsMention, othersMention } = validation.data;\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    \n\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set in .env file');\n        return { success: false, message: 'Server configuration error.' };\n    }\n\n    let howFoundValue = howYouFound;\n    if (howYouFound === 'friends' && friendsMention) {\n        howFoundValue = `Friends: ${friendsMention}`;\n    } else if (howYouFound === 'others' && othersMention) {\n        howFoundValue = `Others: ${othersMention}`;\n    }\n\n    const fields = [\n        { name: 'Name', value: name, inline: true },\n        { name: 'Discord Tag', value: discordTag, inline: true },\n        { name: 'Email', value: email, inline: true },\n        { name: 'Steam Profile', value: steamUrl, inline: false },\n        { name: 'Experience', value: experience },\n        { name: 'How they found us', value: howFoundValue }\n    ];\n\n    const embed = {\n        title: `New VTC Application - ${applicationId}`,\n        color: 3977201, // Medium Sea Green\n        fields: fields,\n        timestamp: new Date().toISOString(),\n        footer: {\n            text: 'Tamil Pasanga VTC Application',\n        },\n    };\n    \n    const payload = {\n        content: `New application from ${name}`,\n        embeds: [embed],\n        components: [\n          {\n            type: 1, // Action Row\n            components: [\n              {\n                type: 2, // Button\n                style: 3, // Success\n                label: 'Accept',\n                custom_id: `accept_${applicationId}`,\n              },\n              {\n                type: 2, // Button\n                style: 4, // Danger\n                label: 'Reject',\n                custom_id: `reject_${applicationId}`,\n              },\n              {\n                type: 2, // Button\n                style: 1, // Primary\n                label: 'Accept for Interview',\n                custom_id: `interview_${applicationId}`,\n              },\n            ],\n          },\n        ],\n    };\n\n    try {\n        const response = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n            console.error(`Discord webhook failed with status: ${response.status}`);\n            const errorBody = await response.text();\n            console.error('Error body:', errorBody);\n            // Don't fail the whole process if webhook fails, application is saved.\n        }\n\n        return { success: true, message: 'Application submitted successfully!', applicationId };\n    } catch (error) {\n        console.error('Error submitting application to Discord:', error);\n        // Don't fail the whole process if webhook fails, application is saved.\n        return { success: true, message: 'Application submitted successfully!', applicationId };\n    }\n}\n\nexport type ApplicationStatusResult = {\n    applicationId: string;\n    status: 'Pending' | 'Accepted' | 'Rejected' | 'Interview' | 'Not Found';\n};\n\nexport async function getApplicationStatus(\n  applicationId: string\n): Promise<ApplicationStatusResult> {\n    const validIdRegex = /^TP-\\d{4}$/;\n    if (!validIdRegex.test(applicationId)) {\n        return { applicationId, status: 'Not Found' };\n    }\n\n    try {\n        const applicationsData = await readApplications();\n        const application = applicationsData.applications.find(app => app.id === applicationId);\n\n        if (application) {\n            return { applicationId, status: application.status };\n        } else {\n            return { applicationId, status: 'Not Found' };\n        }\n    } catch (error) {\n        console.error('Error reading application status:', error);\n        return { applicationId, status: 'Not Found' }; // Treat file read errors as \"Not Found\" for the user\n    }\n}\n","size_bytes":6125},"src/app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 7.1%; /* #121212 */\n    --foreground: 0 0% 100%;\n\n    --card: 0 0% 10.2%; /* #1a1a1a */\n    --card-foreground: 0 0% 100%;\n\n    --popover: 0 0% 10.2%;\n    --popover-foreground: 0 0% 100%;\n\n    --primary: 142 71% 45%; /* #3CB371 - Medium Sea Green */\n    --primary-foreground: 0 0% 100%;\n\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n\n    --accent: 142 61% 35%; /* Darker Sea Green */\n    --accent-foreground: 0 0% 100%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n\n    --border: 0 0% 20%;\n    --input: 0 0% 20%;\n    --ring: 142 71% 45%;\n\n    --radius: 0.75rem;\n    \n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    \n    --sidebar-background: 0 0% 7.1%;\n    --sidebar-foreground: 0 0% 100%;\n    --sidebar-primary: 142 71% 45%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 142 61% 35%;\n    --sidebar-accent-foreground: 0 0% 100%;\n    --sidebar-border: 0 0% 20%;\n    --sidebar-ring: 142 71% 45%;\n  }\n\n  .dark {\n    --background: 0 0% 7.1%; /* #121212 */\n    --foreground: 0 0% 100%;\n\n    --card: 0 0% 10.2%; /* #1a1a1a */\n    --card-foreground: 0 0% 100%;\n\n    --popover: 0 0% 10.2%;\n    --popover-foreground: 0 0% 100%;\n\n    --primary: 142 71% 45%; /* #3CB371 - Medium Sea Green */\n    --primary-foreground: 0 0% 100%;\n\n    --secondary: 0 0% 14.9%;\n    --secondary-foreground: 0 0% 98%;\n\n    --muted: 0 0% 14.9%;\n    --muted-foreground: 0 0% 63.9%;\n\n    --accent: 142 61% 35%; /* Darker Sea Green */\n    --accent-foreground: 0 0% 100%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n\n    --border: 0 0% 20%;\n    --input: 0 0% 20%;\n    --ring: 142 71% 45%;\n\n    --sidebar-background: 0 0% 7.1%;\n    --sidebar-foreground: 0 0% 100%;\n    --sidebar-primary: 142 71% 45%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 142 61% 35%;\n    --sidebar-accent-foreground: 0 0% 100%;\n    --sidebar-border: 0 0% 20%;\n    --sidebar-ring: 142 71% 45%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n  .animate-fade-in-scroll {\n    animation-timeline: view();\n    animation-range-start: entry 10%;\n    animation-range-end: entry 40%;\n  }\n}\n\n@layer utilities {\n  @keyframes rotate {\n    100% {\n      transform: rotate(1turn);\n    }\n  }\n\n  .animated-border {\n    @apply relative z-0 overflow-hidden;\n  }\n\n  .animated-border::before {\n    content: '';\n    @apply absolute -left-1/2 -top-1/2 z-[-2] h-[200%] w-[200%];\n    background-color: #1a1a1a;\n    background-repeat: no-repeat;\n    background-size: 50% 50%;\n    background-position: 0 0, 100% 0, 100% 100%, 0 100%;\n    background-image: conic-gradient(hsl(var(--primary)), hsl(var(--accent)), hsl(var(--primary)));\n    animation: rotate 4s linear infinite;\n  }\n\n  .animated-border::after {\n    content: '';\n    @apply absolute z-[-1] rounded-lg;\n    left: 2px;\n    top: 2px;\n    width: calc(100% - 4px);\n    height: calc(100% - 4px);\n    background: hsl(var(--card));\n  }\n}\n","size_bytes":3254},"src/app/layout.tsx":{"content":"import type { Metadata } from 'next';\nimport './globals.css';\nimport { Toaster } from '@/components/ui/toaster';\nimport { SnowEffect } from '@/components/app/snow-effect';\nimport './snow.css';\nimport { ApplicationDialog } from '@/components/app/application-dialog';\n\nexport const metadata: Metadata = {\n  title: 'Tamil Pasanga',\n  description: 'Great Experience, We Believe In Quality Not Quantity',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" className=\"dark\">\n      <head>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </head>\n      <body className=\"font-body antialiased\">\n        <SnowEffect />\n        {children}\n        <ApplicationDialog />\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n","size_bytes":1079},"src/app/page.tsx":{"content":"import { Header } from '@/components/app/header';\nimport { Hero } from '@/components/app/hero';\nimport { ApplicationSteps } from '@/components/app/application-steps';\nimport { Testimonial } from '@/components/app/testimonial';\nimport { Newsletter } from '@/components/app/newsletter';\nimport { Footer } from '@/components/app/footer';\nimport { CoreValues } from '@/components/app/core-values';\nimport newsData from '@/lib/news-articles.json';\nimport { PlaceHolderImages } from '@/lib/placeholder-images';\n\nexport default function Home() {\n  const newslettersWithImages = newsData.newsletters.slice(0, 3).map(item => {\n    const image = PlaceHolderImages.find(img => img.id === item.imageId);\n    return { ...item, imageUrl: image?.imageUrl, imageDescription: image?.description, imageHint: image?.imageHint };\n  });\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      <main className=\"flex-grow\">\n        <Hero />\n        <CoreValues />\n        <ApplicationSteps />\n        <Testimonial />\n        <Newsletter articles={newslettersWithImages} />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1141},"src/app/snow.css":{"content":".snowflake {\n  position: fixed;\n  top: -10vh;\n  background: white;\n  border-radius: 50%;\n  pointer-events: none;\n  z-index: 9999;\n  animation: fall linear infinite;\n}\n\n@keyframes fall {\n  from {\n    transform: translateY(-10vh) translateX(0vw);\n  }\n  to {\n    transform: translateY(110vh) translateX(20vw);\n  }\n}\n","size_bytes":313},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/hooks/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3948},"src/lib/applications.ts":{"content":"\nexport type ApplicationStatus = 'Pending' | 'Accepted' | 'Rejected' | 'Interview';\n\nexport type Application = {\n  id: string;\n  name: string;\n  discordTag: string;\n  email: string;\n  steamUrl: string;\n  experience: 'fresher' | 'experienced';\n  howYouFound: 'truckersmp' | 'friends' | 'others';\n  friendsMention?: string;\n  othersMention?: string;\n  status: ApplicationStatus;\n  submittedAt: string;\n};\n\nexport type ApplicationsData = {\n  applications: Application[];\n};\n","size_bytes":471},"src/lib/events.ts":{"content":"\nexport type BookingStatus = 'approved' | 'pending' | 'rejected' | 'hold';\n\nexport type Booking = {\n    id: string;\n    slotNumber: number;\n    vtcName: string;\n    status: BookingStatus;\n};\n\nexport type SlotArea = {\n    id: string;\n    areaName: string;\n    imageUrl: string;\n    startSlot: number;\n    endSlot: number;\n    bookings: Booking[];\n};\n\nexport type Event = {\n    id: string;\n    title: string;\n    date: string;\n    imageId: string;\n    url: string;\n    routeMapUrl?: string;\n    type: 'internal' | 'partner';\n    attendees: number;\n    vtcs: number;\n    departure: string;\n    arrival: string;\n    server: string;\n    meetupTime: string;\n    departureTime: string;\n    description: string;\n    rules: string;\n    slots?: SlotArea[];\n};\n\nexport type EventsData = {\n    events: Event[];\n};\n","size_bytes":802},"src/lib/gallery-images.ts":{"content":"\nexport type GalleryImage = {\n  id: string;\n  imageUrl: string;\n};\n\nexport type GalleryData = {\n  galleryImages: GalleryImage[];\n};\n","size_bytes":132},"src/lib/news-articles.ts":{"content":"export type NewsArticle = {\n  id: string;\n  title: string;\n  description: string;\n  date: string;\n  author: string;\n  imageId: string;\n};\n\nexport type NewsData = {\n  newsletters: NewsArticle[];\n};\n","size_bytes":197},"src/lib/newsletter-data.ts":{"content":"import data from './newsletter-data.json';\n\nexport type Newsletter = {\n  id: string;\n  title: string;\n  date: string;\n  author: string;\n  imageId: string;\n};\n\nexport const Newsletters: Newsletter[] = data.newsletters;\n","size_bytes":218},"src/lib/placeholder-images.ts":{"content":"import data from './placeholder-images.json';\n\nexport type ImagePlaceholder = {\n  id: string;\n  description: string;\n  imageUrl: string;\n  imageHint: string;\n};\n\nexport const PlaceHolderImages: ImagePlaceholder[] = data.placeholderImages;\n","size_bytes":239},"src/lib/schemas.ts":{"content":"import { z } from 'zod';\n\nconst applicationSchemaBase = z.object({\n    name: z.string().min(1, 'Name is required'),\n    discordTag: z.string().min(1, 'Discord Tag is required'),\n    email: z.string().email('Invalid email address'),\n    steamUrl: z.string().url('Invalid Steam profile URL. Please enter a full URL.'),\n    experience: z.enum(['fresher', 'experienced'], {\n        errorMap: () => ({ message: 'Please select your experience level' }),\n    }),\n    howYouFound: z.enum(['truckersmp', 'friends', 'others'], {\n        errorMap: () => ({ message: 'Please select an option' }),\n    }),\n    friendsMention: z.string().optional(),\n    othersMention: z.string().optional(),\n    terms: z.literal<boolean>(true, {\n        errorMap: () => ({ message: 'You must accept the terms and conditions' }),\n    }),\n});\n\nconst refinedApplicationSchema = applicationSchemaBase.superRefine((data, ctx) => {\n    if (data.howYouFound === 'friends' && (!data.friendsMention || data.friendsMention.trim().length === 0)) {\n        ctx.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: 'Please mention your friend(s)',\n            path: ['friendsMention'],\n        });\n    }\n    if (data.howYouFound === 'others' && (!data.othersMention || data.othersMention.trim().length === 0)) {\n        ctx.addIssue({\n            code: z.ZodIssueCode.custom,\n            message: 'Please specify how you found us',\n            path: ['othersMention'],\n        });\n    }\n});\n\nexport const applicationSchema = refinedApplicationSchema;\n\nexport type ApplicationData = z.infer<typeof applicationSchema>;\n","size_bytes":1594},"src/lib/staff-members.ts":{"content":"\nexport type StaffMember = {\n  id: string;\n  name: string;\n  role: string;\n  imageId: string;\n  imageUrl?: string;\n  steamUrl?: string;\n  truckersmpUrl?: string;\n};\n\nexport type StaffData = {\n  staffMembers: StaffMember[];\n};\n","size_bytes":226},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/api/discord-interactions/route.ts":{"content":"\n'use server';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport {\n  InteractionType,\n  InteractionResponseType,\n  MessageFlags,\n  ButtonStyle,\n  APIInteraction,\n  APIInteractionResponse,\n  APIEmbed,\n  APIApplicationCommandInteraction,\n  APIMessageComponentInteraction,\n} from 'discord-api-types/v10';\nimport { verify } from 'tweetnacl';\nimport type { ApplicationStatus, ApplicationsData } from '@/lib/applications';\nimport type { StaffData, StaffMember } from '@/lib/staff-members';\nimport { revalidatePath } from 'next/cache';\n\nconst STAFF_ROLE_ID = '1419223859483115591';\nconst applicationsFilePath = path.join(process.cwd(), 'src', 'lib', 'applications.json');\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\n\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            if (filePath.includes('applications')) return { applications: [] } as any;\n            if (filePath.includes('staff-members')) return { staffMembers: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nasync function updateApplicationAndStaff(\n  applicationId: string,\n  newStatus: ApplicationStatus,\n  role: string = 'Trainee'\n) {\n  try {\n    const applicationsData = await readJsonFile<ApplicationsData>(applicationsFilePath);\n    const staffData = await readJsonFile<StaffData>(staffFilePath);\n    \n    const appIndex = applicationsData.applications.findIndex(app => app.id === applicationId);\n\n    if (appIndex === -1) {\n      console.error(`Application with ID ${applicationId} not found.`);\n      return;\n    }\n\n    const application = applicationsData.applications[appIndex];\n    const oldStatus = application.status;\n\n    // Update status\n    application.status = newStatus;\n\n    // If accepting, check if they are already a staff member to avoid duplicates\n    if (newStatus === 'Accepted' && oldStatus !== 'Accepted') {\n      const isAlreadyStaff = staffData.staffMembers.some(member => member.name === application.name);\n      \n      if (!isAlreadyStaff) {\n        const newMember: StaffMember = {\n            id: `staff-${Date.now()}`,\n            name: application.name,\n            role: role,\n            imageId: 'testimonial-avatar',\n            imageUrl: \"https://media.discordapp.net/attachments/1116720480544636999/1274425873201631304/TP_NEW_WB_PNGxxxhdpi.png?ex=68d4d8d5&is=68d38755&hm=b6d4e0e4ef2c3215a4de4fb2f592189a60ddd94c651f96fe04deac2e7f96ddc6&=&format=webp&quality=lossless&width=826&height=826\",\n            steamUrl: application.steamUrl,\n            truckersmpUrl: \"\",\n        };\n        staffData.staffMembers.push(newMember);\n        await writeJsonFile(staffFilePath, staffData);\n      }\n    }\n\n    await writeJsonFile(applicationsFilePath, applicationsData);\n    \n    // Revalidate paths\n    revalidatePath('/admin/applications');\n    revalidatePath('/application-status');\n    revalidatePath('/staff');\n\n  } catch (error) {\n    console.error(`Error processing application ${applicationId}:`, error);\n  }\n}\n\nfunction respond(response: APIInteractionResponse) {\n  return new NextResponse(JSON.stringify(response), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n}\n\nfunction respondEphimerally(content: string) {\n    return respond({\n        type: InteractionResponseType.ChannelMessageWithSource,\n        data: {\n            content,\n            flags: MessageFlags.Ephemeral,\n        },\n    });\n}\n\nasync function sendFollowupMessage(interactionToken: string, content: string) {\n  const fetch = (await import('node-fetch')).default;\n  const url = `https://discord.com/api/v10/webhooks/${process.env.DISCORD_APPLICATION_ID}/${interactionToken}`;\n  \n  await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ content }),\n  });\n}\n\nexport async function POST(req: NextRequest) {\n  const signature = req.headers.get('x-signature-ed25519');\n  const timestamp = req.headers.get('x-signature-timestamp');\n  const rawBody = await req.text();\n\n  if (!signature || !timestamp) {\n    return new NextResponse('Missing signature headers', { status: 401 });\n  }\n\n  const publicKey = process.env.DISCORD_PUBLIC_KEY;\n  if (!publicKey) {\n    console.error('DISCORD_PUBLIC_KEY is not set');\n    return new NextResponse('Server configuration error', { status: 500 });\n  }\n\n  const isVerified = verify(\n    Buffer.from(timestamp + rawBody),\n    Buffer.from(signature, 'hex'),\n    Buffer.from(publicKey, 'hex')\n  );\n\n  if (!isVerified) {\n    return new NextResponse('Invalid signature', { status: 401 });\n  }\n\n  const interaction = JSON.parse(rawBody) as APIInteraction;\n\n  if (interaction.type === InteractionType.Ping) {\n    return respond({ type: InteractionResponseType.Pong });\n  }\n\n  if (interaction.type === InteractionType.ApplicationCommand) {\n    const command = interaction as APIApplicationCommandInteraction;\n    const memberRoles = command.member?.roles as string[] | undefined;\n\n    // Role check for all application commands\n    if (!memberRoles || !memberRoles.includes(STAFF_ROLE_ID)) {\n        return respondEphimerally('You do not have permission to use this command.');\n    }\n    \n    const staffMember = command.member?.user;\n\n    if (!staffMember) {\n      return respondEphimerally(\"Could not identify the user running the command.\");\n    }\n\n    if (command.data.name === 'hello') {\n      return respond({\n        type: InteractionResponseType.ChannelMessageWithSource,\n        data: {\n          content: 'Hello! I am the Tamil Pasanga VTC bot, here to help.',\n        },\n      });\n    }\n\n    if (command.data.name === 'accept' || command.data.name === 'reject') {\n      const applicationId = (command.data.options?.[0] as any)?.value;\n      if (!applicationId) {\n        return respondEphimerally('You must provide an Application ID.');\n      }\n      \n      const action = command.data.name;\n      let followupMessage = '';\n      let newStatus: ApplicationStatus = 'Pending';\n\n      if (action === 'accept') {\n        newStatus = 'Accepted';\n        followupMessage = `✅ **Application Accepted** | \\`${applicationId}\\` has been manually accepted by <@${staffMember.id}>.`;\n      } else {\n        newStatus = 'Rejected';\n        followupMessage = `❌ **Application Rejected** | \\`${applicationId}\\` has been manually rejected by <@${staffMember.id}>.`;\n      }\n      \n      // Update the application status in the background\n      updateApplicationAndStaff(applicationId, newStatus).catch(console.error);\n\n      // Acknowledge the command immediately\n      return respond({\n          type: InteractionResponseType.ChannelMessageWithSource,\n          data: {\n              content: followupMessage,\n          },\n      });\n    }\n  }\n\n  if (interaction.type === InteractionType.MessageComponent) {\n    const componentInteraction = interaction as APIMessageComponentInteraction;\n    const memberRoles = componentInteraction.member?.roles as string[] | undefined;\n    \n    // Role check for all message components\n    if (!memberRoles || !memberRoles.includes(STAFF_ROLE_ID)) {\n        return respondEphimerally('You do not have permission to use this button.');\n    }\n\n    if (!interaction.member) {\n        return respondEphimerally(\"Could not identify the user clicking the button.\");\n    }\n    \n    const customId = interaction.data.custom_id;\n    const [action, applicationId] = customId.split('_');\n    const staffMember = interaction.member.user;\n\n    const originalMessage = interaction.message;\n    const originalEmbed = originalMessage.embeds[0];\n\n    let statusText = '';\n    let color = originalEmbed.color;\n    let followupMessage = '';\n    let newStatus: ApplicationStatus = 'Pending';\n\n    switch (action) {\n      case 'accept':\n        statusText = `Accepted by ${staffMember.username}`;\n        color = 5763719; // Green\n        followupMessage = `✅ **Application Accepted** | \\`${applicationId}\\` has been accepted by <@${staffMember.id}>.`;\n        newStatus = 'Accepted';\n        break;\n      case 'reject':\n        statusText = `Rejected by ${staffMember.username}`;\n        color = 15548997; // Red\n        followupMessage = `❌ **Application Rejected** | \\`${applicationId}\\` has been rejected by <@${staffMember.id}>.`;\n        newStatus = 'Rejected';\n        break;\n      case 'interview':\n        statusText = `Interview scheduled by ${staffMember.username}`;\n        color = 3447003; // Blue\n        followupMessage = `💬 **Interview Stage** | \\`${applicationId}\\` has been moved to the interview stage by <@${staffMember.id}>.`;\n        newStatus = 'Interview';\n        break;\n      default:\n        return respondEphimerally('Unknown action.');\n    }\n    \n    // We must acknowledge the interaction first by updating the message.\n    // A follow-up response can be sent after.\n    const updatedEmbed: APIEmbed = {\n        ...originalEmbed,\n        color,\n        fields: [\n            ...(originalEmbed.fields || []),\n            { name: 'Status', value: statusText, inline: false }\n        ]\n    };\n\n    // Use a Promise to send the followup and update data after responding to the interaction\n    if (followupMessage) {\n      // We don't await these, because we need to send the initial response quickly.\n      sendFollowupMessage(interaction.token, followupMessage).catch(console.error);\n      updateApplicationAndStaff(applicationId, newStatus).catch(console.error);\n    }\n\n    // Respond to the initial interaction to update the message\n    return respond({\n        type: InteractionResponseType.UpdateMessage,\n        data: {\n            embeds: [updatedEmbed],\n            // Disable buttons after action\n            components: [\n              {\n                type: 1, // Action Row\n                components: [\n                  { type: 2, style: ButtonStyle.Success, label: 'Accept', custom_id: 'accept_disabled', disabled: true },\n                  { type: 2, style: ButtonStyle.Danger, label: 'Reject', custom_id: 'reject_disabled', disabled: true },\n                  { type: 2, style: ButtonStyle.Primary, label: 'Accept for Interview', custom_id: 'interview_disabled', disabled: true },\n                ]\n              }\n            ]\n        },\n    });\n  }\n\n  return respondEphimerally('Interaction type not supported.');\n}\n","size_bytes":10627},"src/app/about/page.tsx":{"content":"import { Header } from '@/components/app/header';\nimport { Footer } from '@/components/app/footer';\nimport { About } from '@/components/app/about';\nimport { Achievements } from '@/components/app/achievements';\n\nexport default function AboutPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      <main className=\"flex-grow\">\n        <About />\n        <Achievements />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":467},"src/app/admin/page.tsx":{"content":"\nimport { Footer } from '@/components/app/footer';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Newspaper, Shield, Image as ImageIcon, Users, FileText, Calendar } from 'lucide-react';\nimport Link from 'next/link';\n\nexport default function AdminPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <main className=\"flex-grow flex items-center justify-center text-center p-4\">\n        <div className=\"space-y-8 max-w-4xl w-full\">\n          <div className=\"space-y-2\">\n            <Shield className=\"mx-auto h-16 w-16 text-primary\" />\n            <h1 className=\"text-4xl font-headline\">Admin Panel</h1>\n            <p className=\"text-muted-foreground\">\n              Welcome to the admin area. Manage your site content here.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 text-left\">\n            <Card className=\"bg-card hover:shadow-primary/20 transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText size={20} />\n                  <span>Manage Applications</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">View and process new driver applications.</p>\n                <Button asChild>\n                  <Link href=\"/admin/applications\">Go to Applications</Link>\n                </Button>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-card hover:shadow-primary/20 transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Newspaper size={20} />\n                  <span>Manage News</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">Create, edit, and delete news articles for the homepage.</p>\n                <Button asChild>\n                  <Link href=\"/admin/news\">Go to News</Link>\n                </Button>\n              </CardContent>\n            </Card>\n             <Card className=\"bg-card hover:shadow-primary/20 transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar size={20} />\n                  <span>Manage Events</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">Add, edit, and delete internal and partner events.</p>\n                <Button asChild>\n                  <Link href=\"/admin/events\">Go to Events</Link>\n                </Button>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-card hover:shadow-primary/20 transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ImageIcon size={20} />\n                  <span>Manage Gallery</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">Add, edit, and delete images in the website gallery.</p>\n                <Button asChild>\n                  <Link href=\"/admin/gallery\">Go to Gallery</Link>\n                </Button>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-card hover:shadow-primary/20 transition-shadow\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users size={20} />\n                  <span>Manage Staff</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground mb-4\">Add, edit, and delete staff members from your team list.</p>\n                <Button asChild>\n                  <Link href=\"/admin/staff\">Go to Staff</Link>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4221},"src/app/application-status/page.tsx":{"content":"import { Header } from '@/components/app/header';\nimport { Footer } from '@/components/app/footer';\nimport { ApplicationStatus } from '@/components/app/application-status';\n\nexport default function ApplicationStatusPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      <main className=\"flex-grow pt-32 md:pt-40\">\n        <ApplicationStatus />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":444},"src/app/events/page.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport { Header } from '@/components/app/header';\nimport { Footer } from '@/components/app/footer';\nimport Image from 'next/image';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport { Calendar, Image as ImageIcon } from 'lucide-react';\nimport type { Event } from '@/lib/events';\nimport eventsData from '@/lib/events.json';\nimport { PlaceHolderImages } from '@/lib/placeholder-images';\n\nconst bannerImage = PlaceHolderImages.find(p => p.id === 'events-banner');\n\nconst EventCard = ({ event }: { event: Event }) => {\n    const image = PlaceHolderImages.find(p => p.id === event.imageId);\n    const linkHref = event.type === 'partner' ? event.url : `/events/${event.id}`;\n    \n    return (\n        <Card className=\"bg-card border-border/50 shadow-lg hover:shadow-primary/20 transition-shadow duration-300 flex flex-col group\">\n            {image && (\n                <div className=\"relative h-40 w-full\">\n                    <Image\n                        src={image.imageUrl}\n                        alt={image.description}\n                        fill\n                        className=\"object-cover rounded-t-lg transition-transform duration-300 group-hover:scale-105\"\n                        data-ai-hint={image.imageHint}\n                    />\n                </div>\n            )}\n            <CardContent className=\"p-4 flex-grow flex flex-col\">\n                <h3 className=\"font-headline text-lg mb-2 flex-grow\">{event.title}</h3>\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{event.date}</span>\n                </div>\n                <div className=\"flex flex-col sm:flex-row gap-2\">\n                    <Button asChild className=\"w-full\">\n                        <Link href={linkHref} target={event.type === 'partner' ? '_blank' : '_self'}>\n                            {event.type === 'internal' ? 'Slot Booking' : 'View Event'}\n                        </Link>\n                    </Button>\n                     {event.type === 'internal' && (\n                        <Button asChild variant=\"secondary\" className=\"w-full\">\n                            <Link href={`/events/${event.id}#event-slots`}>\n                                <ImageIcon className=\"mr-2 h-4 w-4\" />\n                                Book Slot Image\n                            </Link>\n                        </Button>\n                    )}\n                </div>\n            </CardContent>\n        </Card>\n    );\n};\n\n\nexport default function EventsPage() {\n    const allEvents = eventsData.events;\n    const upcomingEvents = allEvents.filter(e => e.type === 'internal');\n    const partnerEvents = allEvents.filter(e => e.type === 'partner');\n    \n    return (\n        <div className=\"flex flex-col min-h-screen bg-background\">\n            <Header />\n            <main className=\"flex-grow\">\n                {bannerImage &&\n                    <div className=\"relative h-64 w-full\">\n                        <Image\n                            src={bannerImage.imageUrl}\n                            alt={bannerImage.description}\n                            fill\n                            className=\"object-cover\"\n                            data-ai-hint={bannerImage.imageHint}\n                        />\n                        <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                            <h1 className=\"text-4xl font-headline text-white\">Our Events</h1>\n                        </div>\n                    </div>\n                }\n\n                <div className=\"container mx-auto px-4 py-16\">\n                    <section id=\"upcoming-events\" className=\"mb-16\">\n                        <h2 className=\"text-3xl font-headline text-center mb-8 text-primary\">Upcoming Tamil Pasanga Events</h2>\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\n                            {upcomingEvents.map(event => (\n                                <EventCard key={event.id} event={event} />\n                            ))}\n                        </div>\n                    </section>\n\n                    <section id=\"partner-events\">\n                        <h2 className=\"text-3xl font-headline text-center mb-8 text-primary\">Where We'll Be Next</h2>\n                        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\n                             {partnerEvents.map(event => (\n                                <EventCard key={event.id} event={event} />\n                             ))}\n                        </div>\n                    </section>\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","size_bytes":4899},"src/app/features/page.tsx":{"content":"import { Header } from '@/components/app/header';\nimport { Footer } from '@/components/app/footer';\nimport { Features } from '@/components/app/features';\n\nexport default function FeaturesPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      <main className=\"flex-grow pt-24\">\n        <Features />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":398},"src/app/gallery/page.tsx":{"content":"\n'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Header } from '@/components/app/header';\nimport { Footer } from '@/components/app/footer';\nimport Image from 'next/image';\nimport { Card } from '@/components/ui/card';\nimport type { GalleryImage } from '@/lib/gallery-images';\nimport galleryData from '@/lib/gallery-images.json';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { ChevronLeft, ChevronRight, X } from 'lucide-react';\n\nconst bannerImageUrl = \"https://cdn.discordapp.com/attachments/1281551151418048677/1414862372199202927/ets2_20250907_201945_00.PNG?ex=68d43a84&is=68d2e904&hm=c6a185bd254316fdb29cdd8e8f8255b85a60a3760da66ed8f10813dc2d90e01b&\";\n\nexport default function GalleryPage() {\n    const images: GalleryImage[] = galleryData.galleryImages;\n    const [selectedImageIndex, setSelectedImageIndex] = useState<number | null>(null);\n    const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n    const openLightbox = (index: number) => {\n        setSelectedImageIndex(index);\n    };\n\n    const closeLightbox = () => {\n        setSelectedImageIndex(null);\n    };\n\n    const goToNext = () => {\n        if (selectedImageIndex !== null) {\n            setSelectedImageIndex((prevIndex) => (prevIndex! + 1) % images.length);\n        }\n    };\n\n    const goToPrev = () => {\n        if (selectedImageIndex !== null) {\n            setSelectedImageIndex((prevIndex) => (prevIndex! - 1 + images.length) % images.length);\n        }\n    };\n\n    useEffect(() => {\n        if (intervalRef.current) {\n            clearInterval(intervalRef.current);\n        }\n\n        if (selectedImageIndex !== null) {\n            intervalRef.current = setInterval(() => {\n                goToNext();\n            }, 3000); // Autoplay every 3 seconds\n        }\n\n        return () => {\n            if (intervalRef.current) {\n                clearInterval(intervalRef.current);\n            }\n        };\n    }, [selectedImageIndex, images.length]);\n    \n    return (\n        <div className=\"flex flex-col min-h-screen bg-background\">\n            <Header />\n            <main className=\"flex-grow\">\n                 <div className=\"relative h-64 w-full\">\n                    <Image\n                        src={bannerImageUrl}\n                        alt=\"Gallery Banner\"\n                        fill\n                        className=\"object-cover\"\n                    />\n                    <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                        <div className=\"text-center\">\n                            <h1 className=\"text-4xl font-headline text-white\">Our Gallery</h1>\n                            <p className=\"text-muted-foreground mt-2 text-white/80\">A collection of our best moments.</p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"container mx-auto px-4 py-16\">\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-8\">\n                        {images.map((image, index) => (\n                            <Card key={image.id} className=\"overflow-hidden group transition-all duration-300 hover:shadow-lg hover:shadow-primary/40\">\n                                <div className=\"relative aspect-video cursor-pointer\" onClick={() => openLightbox(index)}>\n                                    <Image\n                                        src={image.imageUrl}\n                                        alt={image.id}\n                                        fill\n                                        className=\"object-cover transition-transform duration-300 group-hover:scale-105 rounded-lg\"\n                                    />\n                                </div>\n                            </Card>\n                        ))}\n                    </div>\n                    <div className=\"mt-12 text-center\">\n                        <Button variant=\"outline\" asChild>\n                            <Link href=\"/\">Back to Home</Link>\n                        </Button>\n                    </div>\n                </div>\n            </main>\n            <Footer />\n\n            {selectedImageIndex !== null && (\n                <div className=\"fixed inset-0 bg-black/90 z-50 flex items-center justify-center\" onClick={closeLightbox}>\n                    <div className=\"relative w-full h-full max-w-4xl max-h-4/5\" onClick={(e) => e.stopPropagation()}>\n                         {images[selectedImageIndex] && (\n                            <Image\n                                key={images[selectedImageIndex].id}\n                                src={images[selectedImageIndex].imageUrl}\n                                alt={images[selectedImageIndex].id}\n                                layout=\"fill\"\n                                objectFit=\"contain\"\n                                className=\"rounded-lg\"\n                            />\n                        )}\n                        <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 bg-black/70 text-white text-sm px-3 py-1 rounded-full\">\n                            {selectedImageIndex + 1} / {images.length}\n                        </div>\n                         <button onClick={closeLightbox} className=\"absolute top-4 right-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/80 transition-colors\">\n                            <X size={24} />\n                        </button>\n                        <button onClick={goToPrev} className=\"absolute left-4 top-1/2 -translate-y-1/2 text-white bg-black/50 rounded-full p-2 hover:bg-black/80 transition-colors\">\n                            <ChevronLeft size={32} />\n                        </button>\n                        <button onClick={goToNext} className=\"absolute right-4 top-1/2 -translate-y-1/2 text-white bg-black/50 rounded-full p-2 hover:bg-black/80 transition-colors\">\n                            <ChevronRight size={32} />\n                        </button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n","size_bytes":6086},"src/app/maintenance/page.tsx":{"content":"import { Header } from '@/components/app/header';\nimport { Footer } from '@/components/app/footer';\nimport { Construction } from 'lucide-react';\n\nexport default function MaintenancePage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      <main className=\"flex-grow flex items-center justify-center text-center\">\n        <div className=\"space-y-4\">\n          <Construction className=\"mx-auto h-16 w-16 text-primary\" />\n          <h1 className=\"text-4xl font-headline\">Under Maintenance</h1>\n          <p className=\"text-muted-foreground\">\n            This page is currently being updated. Please check back later.\n          </p>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":741},"src/app/news/page.tsx":{"content":"import { Header } from '@/components/app/header';\nimport { Footer } from '@/components/app/footer';\nimport Image from 'next/image';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { PlaceHolderImages } from '@/lib/placeholder-images';\nimport { Calendar, User } from 'lucide-react';\nimport newsData from '@/lib/news-articles.json';\nimport Link from 'next/link';\n\nconst newsletters = newsData.newsletters;\n\nexport default function AllNewsPage() {\n  const bannerImage = PlaceHolderImages.find(img => img.id === 'create-news-banner');\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      <main className=\"flex-grow\">\n        <div className=\"relative h-64 w-full\">\n            {bannerImage && (\n                <Image\n                src={bannerImage.imageUrl}\n                alt={bannerImage.description}\n                fill\n                className=\"object-cover\"\n                data-ai-hint={bannerImage.imageHint}\n                />\n            )}\n            <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                <h1 className=\"text-4xl font-headline text-white\">News Archive</h1>\n            </div>\n        </div>\n        <div className=\"container mx-auto px-4 py-16\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {newsletters.map((item) => {\n                const image = PlaceHolderImages.find(img => img.id === item.imageId);\n                return (\n                <Card key={item.id} className=\"flex flex-col bg-card border-border/50 shadow-lg hover:shadow-primary/20 transition-shadow duration-300\">\n                    {image && (\n                    <div className=\"relative h-48 w-full\">\n                        <Image\n                        src={image.imageUrl}\n                        alt={image.description}\n                        fill\n                        className=\"object-cover\"\n                        data-ai-hint={image.imageHint}\n                        sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n                        />\n                    </div>\n                    )}\n                    <CardHeader>\n                    <CardTitle className=\"font-headline text-xl\">{item.title}</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"flex-grow space-y-2 text-sm text-muted-foreground\">\n                    <p className=\"mb-4\">{item.description}</p>\n                    <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>{item.date}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4\" />\n                        <span>By {item.author}</span>\n                    </div>\n                    </CardContent>\n                    <CardFooter>\n                    <Button variant=\"link\" className=\"text-primary p-0\" asChild>\n                        {/* This link can be updated later to point to a full article page */}\n                        <Link href=\"#\">Read More &rarr;</Link>\n                    </Button>\n                    </CardFooter>\n                </Card>\n                );\n            })}\n            </div>\n             <div className=\"mt-12 text-center\">\n                <Button variant=\"outline\" asChild>\n                    <Link href=\"/\">Back to Home</Link>\n                </Button>\n            </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3684},"src/app/staff/page.tsx":{"content":"\nimport { Header } from '@/components/app/header';\nimport { Footer } from '@/components/app/footer';\nimport Image from 'next/image';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { PlaceHolderImages } from '@/lib/placeholder-images';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport staffData from '@/lib/staff-members.json';\nimport type { StaffMember } from '@/lib/staff-members';\nimport { Truck, Shield, Star, School, Film, Calendar, BookOpen, Users, Briefcase, Trophy, Crown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n\nconst staffMembers: StaffMember[] = staffData.staffMembers;\n\n// Group staff by role\nconst staffByRole = staffMembers.reduce((acc, member) => {\n  if (!acc[member.role]) {\n    acc[member.role] = [];\n  }\n  acc[member.role].push(member);\n  return acc;\n}, {} as Record<string, StaffMember[]>);\n\n// Define the order of roles\nconst roleOrder = [\n    'Managing Director',\n    'Marketing Executive',\n    'Human Resource Staff',\n    'Trainer',\n    'Event Staff',\n    'Event Organizer',\n    'Media Staff',\n    'Media Editor',\n    'Senior Driver',\n    'Driver',\n    'Trainee',\n];\n\nconst bannerImageUrl = \"https://cdn.discordapp.com/attachments/1281551151418048677/1414862372199202927/ets2_20250907_201945_00.PNG?ex=68d43a84&is=68d2e904&hm=c6a185bd254316fdb29cdd8e8f8255b85a60a3760da66ed8f10813dc2d90e01b&\";\n\nconst SteamIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg\n        viewBox=\"0 0 24 24\"\n        fill=\"currentColor\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        {...props}\n    >\n        <path d=\"M12,2A10,10,0,0,0,2,12A10,10,0,0,0,12,22A10,10,0,0,0,22,12A10,10,0,0,0,12,2M12,4A8,8,0,0,1,20,12A8,8,0,0,1,12,20A8,8,0,0,1,4,12A8,8,0,0,1,12,4M8.15,8.15C7.86,7.86 7.3,8.08 7.35,8.5L8.23,13.2L3.5,14.65C3.08,14.8 2.86,15.36 3.15,15.65L8.5,18.85L13.2,17.96L14.65,22.5C14.8,22.92 15.36,23.14 15.65,22.85L18.85,17.5L17.96,12.8L22.5,11.35C22.92,11.2 23.14,10.64 22.85,10.35L17.5,7.15L12.8,8.04L11.35,3.5C11.2,3.08 10.64,2.86 10.35,3.15L7.15,8.15M13,9A4,4,0,0,1,17,13A4,4,0,0,1,13,17A4,4,0,0,1,9,13A4,4,0,0,1,13,9M13,11A2,2,0,0,0,11,13A2,2,0,0,0,13,15A2,2,0,0,0,15,13A2,2,0,0,0,13,11Z\" />\n    </svg>\n);\n\nexport default function StaffPage() {\n  const defaultImage = PlaceHolderImages.find(img => img.id === 'testimonial-avatar');\n\n  const teamMembersCount = staffMembers.length;\n  const rolesCount = roleOrder.length;\n  \n  const leadership = staffMembers.filter(m => m.role === 'Managing Director');\n  const otherStaff = staffMembers.filter(m => m.role !== 'Managing Director');\n\n  // Re-calculate staff by role for non-leadership roles\n  const staffByRoleFiltered = otherStaff.reduce((acc, member) => {\n    if (!acc[member.role]) {\n      acc[member.role] = [];\n    }\n    acc[member.role].push(member);\n    return acc;\n  }, {} as Record<string, StaffMember[]>);\n\n\n  const stats = [\n    { icon: <Users size={24} className=\"text-yellow-400\" />, value: teamMembersCount, label: \"Team Members\" },\n    { icon: <Trophy size={24} className=\"text-yellow-400\" />, value: rolesCount, label: \"Roles\" },\n    { icon: <Star size={24} className=\"text-yellow-400\" />, value: \"24/7\", label: \"Support\" },\n    { icon: <Truck size={24} className=\"text-yellow-400\" />, value: \"100%\", label: \"Professional\" },\n  ];\n\n  const getRoleStyle = (role: string) => {\n    if (role === 'Managing Director') return 'border-yellow-400/50 bg-yellow-950/50 text-yellow-300';\n    if (role === 'Senior Driver') return 'border-yellow-500/50 bg-yellow-950/50 text-yellow-400';\n    if (role === 'Driver') return 'border-green-500/50 bg-green-950/50 text-green-400';\n    if (role === 'Trainee') return 'border-red-500/50 bg-red-950/50 text-red-400';\n    if (role === 'Media Staff' || role === 'Media Editor') return 'border-purple-500/50 bg-purple-950/50 text-purple-400';\n    if (role === 'Event Staff' || role === 'Event Organizer') return 'border-orange-500/50 bg-orange-950/50 text-orange-400';\n    if (role === 'Trainer') return 'border-cyan-500/50 bg-cyan-950/50 text-cyan-400';\n    if (role === 'Human Resource Staff') return 'border-pink-500/50 bg-pink-950/50 text-pink-400';\n    if (role === 'Marketing Executive') return 'border-teal-500/50 bg-teal-950/50 text-teal-400';\n    return 'border-blue-500/50 bg-blue-950/50 text-blue-400';\n  };\n\n  const getRoleIcon = (role: string) => {\n    if (role === 'Managing Director') return <Crown className=\"mr-1 h-3 w-3 text-yellow-300\" />;\n    if (role === 'Senior Driver') return <Star className=\"mr-1 h-3 w-3 text-yellow-400\" />;\n    if (role === 'Driver') return <Truck className=\"mr-1 h-3 w-3 text-green-400\" />;\n    if (role === 'Trainee') return <School className=\"mr-1 h-3 w-3 text-red-400\" />;\n    if (role === 'Media Staff' || role === 'Media Editor') return <Film className=\"mr-1 h-3 w-3 text-purple-400\" />;\n    if (role === 'Event Staff' || role === 'Event Organizer') return <Calendar className=\"mr-1 h-3 w-3 text-orange-400\" />;\n    if (role === 'Trainer') return <BookOpen className=\"mr-1 h-3 w-3 text-cyan-400\" />;\n    if (role === 'Human Resource Staff') return <Users className=\"mr-1 h-3 w-3 text-pink-400\" />;\n    if (role === 'Marketing Executive') return <Briefcase className=\"mr-1 h-3 w-3 text-teal-400\" />;\n    return <Shield className=\"mr-1 h-3 w-3 text-blue-400\" />;\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <Header />\n      <main className=\"flex-grow\">\n        <div className=\"relative h-64 w-full overflow-hidden\">\n            <Image\n                src={bannerImageUrl}\n                alt=\"Staff Banner\"\n                fill\n                className=\"object-cover animate-fade-in\"\n            />\n            <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                <div className=\"text-center\">\n                    <h1 className=\"text-4xl font-headline text-white animate-slide-up-fade\">Our Staff</h1>\n                    <p className=\"text-muted-foreground mt-2 text-white/80 animate-slide-up-fade [animation-delay:0.3s]\">The team that makes it all happen.</p>\n                </div>\n            </div>\n        </div>\n\n        <section className=\"py-16 bg-background\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {stats.map((stat, index) => (\n                <Card key={index} className=\"bg-card/80 backdrop-blur-sm border border-white/10 rounded-lg p-6 text-center shadow-lg transition-all hover:border-primary/50 hover:shadow-primary/20\">\n                  <div className=\"flex justify-center mb-4\">\n                    {stat.icon}\n                  </div>\n                  <p className=\"text-4xl font-bold text-white mb-2\">{stat.value}</p>\n                  <p className=\"text-muted-foreground\">{stat.label}</p>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </section>\n\n        <div className=\"container mx-auto px-4 py-16\">\n          \n        {leadership.length > 0 && (\n            <div className=\"mb-16\">\n              <div className=\"flex items-center justify-center gap-4 mb-8\">\n                  <h2 className=\"text-3xl font-headline text-primary animate-fade-in-scroll\">\n                      Leadership\n                  </h2>\n              </div>\n              <div className=\"flex justify-center\">\n                {leadership.map((member) => {\n                  const imageSrc = member.imageUrl || defaultImage?.imageUrl;\n                  return (\n                    <Card key={member.id} className=\"animated-border text-center bg-transparent shadow-lg transition-all duration-300 w-full max-w-sm p-[2px]\">\n                      <CardContent className=\"flex flex-col items-center justify-center pt-6\">\n                          {imageSrc && (\n                              <Image\n                                  src={imageSrc}\n                                  alt={`Photo of ${member.name}`}\n                                  width={120}\n                                  height={120}\n                                  className=\"rounded-full mx-auto border-4 border-green-500\"\n                              />\n                          )}\n                          <CardTitle className=\"text-xl font-semibold mt-4\">{member.name}</CardTitle>\n                           <Badge \n                              variant=\"outline\" \n                              className={`mt-2 ${getRoleStyle(member.role)}`}\n                          >\n                              {getRoleIcon(member.role)}\n                              {member.role}\n                          </Badge>\n                          <div className=\"flex justify-center gap-4 mt-4\">\n                              {member.steamUrl && (\n                                  <Link href={member.steamUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                                      <SteamIcon className=\"h-5 w-5\" />\n                                  </Link>\n                              )}\n                              {member.truckersmpUrl && (\n                                  <Link href={member.truckersmpUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                                      <Truck size={20} />\n                                  </Link>\n                              )}\n                          </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          {roleOrder.map((role) => {\n            if (role === 'Managing Director') return null; // Already rendered\n            const membersInRole = staffByRoleFiltered[role];\n            if (!membersInRole || membersInRole.length === 0) return null;\n\n            return (\n              <div key={role} className=\"mb-12\">\n                <div className=\"flex items-center gap-4 mb-6\">\n                    <h2 className=\"text-2xl font-headline text-primary animate-fade-in-scroll\">\n                        {role}\n                    </h2>\n                    <div className=\"bg-red-600 text-white text-sm font-semibold rounded-full px-3 py-1 animate-fade-in-scroll\">\n                        {membersInRole.length} {membersInRole.length === 1 ? 'member' : 'members'}\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8\">\n                  {membersInRole.map((member) => {\n                    const imageSrc = member.imageUrl || defaultImage?.imageUrl;\n                    return (\n                      <Card key={member.id} className=\"animated-border text-center bg-transparent shadow-sm transition-all duration-300 hover:scale-105 group p-[2px]\">\n                        <CardHeader className=\"flex flex-col items-center\">\n                            {imageSrc && (\n                                <Image\n                                    src={imageSrc}\n                                    alt={`Photo of ${member.name}`}\n                                    width={80}\n                                    height={80}\n                                    className=\"rounded-full mx-auto border-4 border-primary/50\"\n                                />\n                            )}\n                        </CardHeader>\n                        <CardContent className=\"flex flex-col items-center justify-center\">\n                            <CardTitle className=\"text-lg font-semibold\">{member.name}</CardTitle>\n                             <Badge \n                                variant=\"outline\" \n                                className={`mt-2 ${getRoleStyle(member.role)}`}\n                            >\n                                {getRoleIcon(member.role)}\n                                {member.role}\n                            </Badge>\n                            <div className=\"flex justify-center gap-4 mt-4\">\n                                {member.steamUrl && (\n                                    <Link href={member.steamUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                                        <SteamIcon className=\"h-5 w-5\" />\n                                    </Link>\n                                )}\n                                {member.truckersmpUrl && (\n                                    <Link href={member.truckersmpUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-muted-foreground hover:text-primary transition-colors\">\n                                        <Truck size={20} />\n                                    </Link>\n                                )}\n                            </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })}\n          <div className=\"mt-12 text-center\">\n              <Button variant=\"outline\" asChild className=\"hover:shadow-lg hover:shadow-primary/40 transition-shadow\">\n                  <Link href=\"/\">Back to Home</Link>\n              </Button>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13436},"src/components/app/about.tsx":{"content":"\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Truck, Users, ShieldCheck, Calendar } from 'lucide-react';\nimport Image from 'next/image';\nimport { PlaceHolderImages } from '@/lib/placeholder-images';\nimport { SnowEffect } from './snow-effect';\n\nconst values = [\n    {\n      icon: <Truck size={24} className=\"text-primary\" />,\n      title: 'Professional Driving',\n      description: 'Safe and realistic driving style.',\n    },\n    {\n      icon: <ShieldCheck size={24} className=\"text-primary\" />,\n      title: 'Team Spirit',\n      description: 'Helping each other and staying united as a family.',\n    },\n    {\n        icon: <Users size={24} className=\"text-primary\" />,\n        title: 'Community Vibes',\n        description: 'Open to all, but proud to represent Tamil culture worldwide.',\n    },\n    {\n        icon: <Calendar size={24} className=\"text-primary\" />,\n        title: 'Convoys & Events',\n        description: 'Regular convoys, both public and private, ensuring everyone enjoys the journey.',\n    },\n];\n\nexport function About() {\n  const aboutImage = PlaceHolderImages.find(img => img.id === 'about-truck');\n\n  return (\n    <>\n      <section id=\"about\" className=\"py-16 md:py-32 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <span className=\"text-primary font-semibold\">ABOUT US</span>\n            <h1 className=\"text-4xl md:text-5xl font-headline mt-2\">Tamil Pasanga Virtual Trucking Company</h1>\n          </div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-12 items-center\">\n            <div className=\"lg:col-span-3 space-y-4 text-muted-foreground\">\n              <p>\n                Tamil Pasanga Is Virtual Trucking Company based around Euro Truck Simulator 2 and American Truck Simulator. It was Founded On 13 Aug 2024 To Bring People Together. It Was Founded By Powerful Gaming.\n              </p>\n              <p>\n                Welcome to the Tamil Pasanga Virtual Trucking Community, where the open road meets endless opportunity! Immerse yourself in a world where innovation and camaraderie fuel the miles you'll conquer. Designed for trucking enthusiasts of all levels, our community provides an immersive experience that redefines virtual logistics—as you roll through breathtaking routes and engage in dynamic missions that transport you into the driver's seat.\n              </p>\n              <p>\n                Our community celebrates the spirit of trucking through a vibrant online platform, connecting players around the globe. Whether you're a seasoned veteran of the simulation or a newcomer eager to explore, Tamil Pasanga is your haven for sharing knowledge, logistics tips, and unforgettable trucking adventures. With a robust support system in place, members can tap into rich resources—from realistic trucking strategies to tech tutorials—ensuring everyone hits the road at their best.\n              </p>\n               <p>\n                At Tamil Pasanga, we believe that every mile matters. Our regularly hosted events, convoy drives, and competitive challenges bring excitement and friendly rivalry to your experience, making your virtual journeys not just everyday missions, but memorable escapades. As part of our community, you'll join a family that thrives on the joy of the journey, celebrating milestones and achievements together.\n              </p>\n              <p>\n                Safety and respect are at the forefront of our ethos, fostering a welcoming environment for all members to enjoy their virtual trucking experience.\n              </p>\n            </div>\n            <div className=\"lg:col-span-2 group rounded-lg overflow-hidden\">\n              {aboutImage && (\n                <Image \n                  src={aboutImage.imageUrl} \n                  alt={aboutImage.description}\n                  width={600}\n                  height={400}\n                  className=\"rounded-lg shadow-lg mx-auto transition-transform duration-300 group-hover:scale-105\"\n                  data-ai-hint={aboutImage.imageHint}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"relative py-16 md:py-24 bg-card overflow-hidden\">\n         <div className=\"absolute inset-0 z-0\">\n            <Image\n            src=\"https://cdn.discordapp.com/attachments/1281551151418048677/1417739857123475538/1758085736934.jpg?ex=68d37da2&is=68d22c22&hm=8704f60b91d953c3e9b83e28d406e362c20affcf91876b7d903227bb10d8bb9d&=&format=webp&width=1389&height=684\"\n            alt=\"Background trucks\"\n            fill\n            className=\"object-cover opacity-20\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-card via-card/80 to-card/50\" />\n            <SnowEffect />\n        </div>\n        <div className=\"container mx-auto px-4 relative z-10\">\n           <div className=\"text-center mb-12\">\n            <span className=\"text-primary font-semibold\">OUR VALUES</span>\n            <h2 className=\"text-3xl md:text-4xl font-headline mt-2\">What We Stand For</h2>\n          </div>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {values.map((value, index) => (\n              <Card key={index} className=\"bg-transparent border-0 text-center p-6 flex flex-col items-center gap-4 transition-transform duration-300 hover:scale-105\">\n                  <div className=\"animated-border shrink-0 w-24 h-24 rounded-full flex items-center justify-center bg-background/50 mb-4 p-[2px]\">\n                    <div className=\"bg-card w-full h-full rounded-full flex items-center justify-center\">\n                       {value.icon}\n                    </div>\n                  </div>\n                  <div className=\"space-y-1\">\n                      <h3 className=\"font-semibold text-xl\">{value.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{value.description}</p>\n                  </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n","size_bytes":6115},"src/components/app/achievements.tsx":{"content":"import { Card, CardContent, CardTitle } from '@/components/ui/card';\nimport { Users, CalendarCheck } from 'lucide-react';\n\nconst achievements = [\n  { icon: <Users size={40} />, value: \"50+\", label: \"Active Drivers\" },\n  { icon: <CalendarCheck size={40} />, value: \"100+\", label: \"Events Completed\" },\n];\n\nexport function Achievements() {\n  return (\n    <section id=\"achievements\" className=\"py-16 md:py-24 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <span className=\"text-primary font-semibold\">OUR ACHIEVEMENTS</span>\n          <h2 className=\"text-3xl md:text-4xl font-headline mt-2\">\n            Community Statistics\n          </h2>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n          {achievements.map((item, index) => (\n            <Card key={index} className=\"p-8 text-center bg-card border-border/50 shadow-lg hover:shadow-primary/20 transition-shadow duration-300\">\n              <CardContent className=\"flex flex-col items-center gap-4\">\n                <div className=\"text-primary w-24 h-24 rounded-full bg-background/50 flex items-center justify-center mb-4\">\n                  {item.icon}\n                </div>\n                <p className=\"text-5xl font-bold font-headline text-primary\">{item.value}</p>\n                <CardTitle className=\"text-xl font-medium text-white\">{item.label}</CardTitle>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1554},"src/components/app/application-dialog.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { ApplicationForm } from './application-form';\nimport { Button } from '../ui/button';\n\nexport function ApplicationDialog() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {/* This is a hidden trigger that we can programmatically click */}\n        <Button id=\"hidden-apply-trigger\" className=\"hidden\" />\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[800px]\">\n        <DialogHeader>\n          <DialogTitle>Apply Now</DialogTitle>\n        </DialogHeader>\n        <ApplicationForm onFormSubmit={() => setOpen(false)} />\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Helper to add click listeners to all apply buttons\nif (typeof window !== 'undefined') {\n  document.addEventListener('click', (event) => {\n    const target = event.target as HTMLElement;\n    if (target.closest('[data-apply-btn]')) {\n      const trigger = document.getElementById('hidden-apply-trigger');\n      if (trigger) {\n        trigger.click();\n      }\n    }\n  });\n}\n","size_bytes":1223},"src/components/app/application-form.tsx":{"content":"\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useForm, useWatch } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { submitApplication, type SubmitResult } from '@/app/actions';\nimport { type ApplicationData, applicationSchema } from '@/lib/schemas';\nimport { Loader2 } from 'lucide-react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '../ui/textarea';\n\n\nexport function ApplicationForm({ onFormSubmit }: { onFormSubmit?: () => void }) {\n  const [isTermsRead, setIsTermsRead] = useState(false);\n  const [isTermsModalOpen, setIsTermsModalOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submissionResult, setSubmissionResult] = useState<SubmitResult | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (submissionResult?.success && submissionResult.applicationId) {\n      const timer = setTimeout(() => {\n        setSubmissionResult(null);\n        if (onFormSubmit) {\n          onFormSubmit();\n        }\n      }, 30000);\n      return () => clearTimeout(timer);\n    }\n  }, [submissionResult, onFormSubmit]);\n\n  const form = useForm<ApplicationData>({\n    resolver: zodResolver(applicationSchema),\n    defaultValues: {\n      name: '',\n      discordTag: '',\n      email: '',\n      steamUrl: '',\n      terms: false,\n      friendsMention: '',\n      othersMention: '',\n    },\n  });\n\n  const howYouFoundValue = useWatch({\n    control: form.control,\n    name: 'howYouFound',\n  });\n\n\n  async function onSubmit(data: ApplicationData) {\n    setIsSubmitting(true);\n    const result = await submitApplication(data);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      setSubmissionResult(result);\n      form.reset();\n      setIsTermsRead(false);\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.message || 'An error occurred',\n      });\n    }\n  }\n\n  if (submissionResult?.success) {\n    return (\n      <div className=\"text-center py-12\">\n        <h2 className=\"text-2xl font-bold text-primary\">Application Submitted!</h2>\n        <p className=\"text-muted-foreground mt-2\">Thank you for applying.</p>\n        <p className=\"mt-4\">Your Application ID is:</p>\n        <p className=\"text-3xl font-bold text-primary mt-2\">{submissionResult.applicationId}</p>\n        <p className=\"text-sm text-muted-foreground mt-4\">You can close this window. It will close automatically in 30 seconds.</p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Full Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter your full name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"discordTag\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Discord Tag</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., username#1234\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email Address</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"your.email@example.com\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"steamUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Steam Profile URL</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"https://steamcommunity.com/id/yourprofile\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n              control={form.control}\n              name=\"experience\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Your Experience</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select your experience level\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"fresher\">Fresher</SelectItem>\n                      <SelectItem value=\"experienced\">Experienced</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"howYouFound\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>How did you find our VTC?</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select an option\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"truckersmp\">TruckersMP</SelectItem>\n                      <SelectItem value=\"friends\">Friends</SelectItem>\n                      <SelectItem value=\"others\">Others</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          {howYouFoundValue === 'friends' && (\n             <FormField\n                control={form.control}\n                name=\"friendsMention\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Friend's Name(s)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Please mention the friend(s) who referred you.\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n          )}\n\n          {howYouFoundValue === 'others' && (\n             <FormField\n                control={form.control}\n                name=\"othersMention\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Please Specify</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"e.g., Discord, TruckersMP forums, etc.\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n          )}\n\n          <FormField\n            control={form.control}\n            name=\"terms\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    disabled={!isTermsRead || isSubmitting}\n                  />\n                </FormControl>\n                <div className=\"space-y-1 leading-none\">\n                  <FormLabel>\n                    I agree to the terms and conditions.\n                  </FormLabel>\n                  <Button\n                    type=\"button\"\n                    variant=\"link\"\n                    className=\"p-0 h-auto text-primary\"\n                    onClick={() => setIsTermsModalOpen(true)}\n                  >\n                    Click here to read the terms.\n                  </Button>\n                  <FormMessage />\n                </div>\n              </FormItem>\n            )}\n          />\n          <Button type=\"submit\" className=\"w-full rounded-full\" size=\"lg\" disabled={isSubmitting}>\n            {isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Submitting...</> : 'Submit Application'}\n          </Button>\n        </form>\n      </Form>\n\n      <AlertDialog open={isTermsModalOpen} onOpenChange={setIsTermsModalOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Terms and Conditions</AlertDialogTitle>\n            <AlertDialogDescription className=\"text-left max-h-[60vh] overflow-y-auto pr-2\">\n                <p className=\"mb-4\">Welcome to Tamil Pasanga VTC. By submitting this application, you agree to the following terms and conditions:</p>\n                <ol className=\"list-decimal list-inside space-y-2\">\n                    <li>You must be at least 15 years of age to apply.</li>\n                    <li>You must own a legal copy of Euro Truck Simulator 2 or American Truck Simulator on Steam.</li>\n                    <li>You must have a registered TruckersMP account in good standing.</li>\n                    <li>Respect all members of the community, including staff and fellow drivers. Harassment, discrimination, or any form of abuse will not be tolerated.</li>\n                    <li>Follow all TruckersMP rules and regulations during convoys and on public servers.</li>\n                    <li>Maintain a professional and realistic driving standard. Reckless driving is not permitted.</li>\n                    <li>You are required to log a minimum number of jobs/miles per month as specified in our driver handbook to remain an active driver.</li>\n                    <li>Communication is key. You must join our Discord server and be responsive to official announcements.</li>\n                    <li>Dual VTCing (being a member of another VTC) is permitted, but your commitment to Tamil Pasanga must be maintained.</li>\n                    <li>Failure to comply with these rules may result in disciplinary action, including suspension or removal from the VTC.</li>\n                </ol>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogAction\n              onClick={() => {\n                setIsTermsRead(true);\n                setIsTermsModalOpen(false);\n              }}\n            >\n              I have read and agree\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}\n","size_bytes":11957},"src/components/app/application-status.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, CheckCircle, XCircle, AlertCircle, Clock } from 'lucide-react';\nimport { getApplicationStatus, type ApplicationStatusResult } from '@/app/actions';\nimport { Badge } from '@/components/ui/badge';\n\nconst applicationStatusSchema = z.object({\n  applicationId: z.string().regex(/^TP-\\d{4}$/, 'Invalid Application ID format. Example: TP-1234'),\n});\n\ntype ApplicationStatusFormData = z.infer<typeof applicationStatusSchema>;\n\nconst statusInfo = {\n    Accepted: {\n        icon: <CheckCircle className=\"h-12 w-12 text-green-500\" />,\n        badge: <Badge variant=\"default\" className=\"bg-green-500\">Accepted</Badge>,\n        message: 'Congratulations! Your application has been accepted.',\n    },\n    Pending: {\n        icon: <Clock className=\"h-12 w-12 text-yellow-500\" />,\n        badge: <Badge variant=\"secondary\" className=\"bg-yellow-500\">Pending</Badge>,\n        message: 'Your application is currently under review. Please check back later.',\n    },\n    Rejected: {\n        icon: <XCircle className=\"h-12 w-12 text-red-500\" />,\n        badge: <Badge variant=\"destructive\">Rejected</Badge>,\n        message: 'We regret to inform you that your application has been rejected.',\n    },\n    Interview: {\n        icon: <AlertCircle className=\"h-12 w-12 text-blue-500\" />,\n        badge: <Badge className=\"bg-blue-500\">Interview</Badge>,\n        message: 'Your application has passed the initial screening. Please check your email for interview details.',\n    },\n    'Not Found': {\n        icon: <AlertCircle className=\"h-12 w-12 text-muted-foreground\" />,\n        badge: <Badge variant=\"outline\">Not Found</Badge>,\n        message: 'No application found with this ID. Please double-check your Application ID.',\n    },\n};\n\nexport function ApplicationStatus() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [statusResult, setStatusResult] = useState<ApplicationStatusResult | null>(null);\n\n  const form = useForm<ApplicationStatusFormData>({\n    resolver: zodResolver(applicationStatusSchema),\n    defaultValues: {\n      applicationId: '',\n    },\n  });\n\n  const onSubmit = async (data: ApplicationStatusFormData) => {\n    setIsLoading(true);\n    setStatusResult(null);\n    const result = await getApplicationStatus(data.applicationId);\n    setStatusResult(result);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"container mx-auto px-4\">\n      <Card className=\"max-w-2xl mx-auto\">\n        <CardHeader>\n          <CardTitle>Check Application Status</CardTitle>\n          <CardDescription>Enter your application ID to see the current status of your application.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"applicationId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Application ID</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., TP-1234\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Check Status\n              </Button>\n            </form>\n          </Form>\n\n          {statusResult && (\n            <div className=\"mt-8 text-center border-t pt-8\">\n              <div className=\"flex justify-center mb-4\">{statusInfo[statusResult.status].icon}</div>\n              <h3 className=\"text-xl font-semibold mb-2\">Application ID: {statusResult.applicationId}</h3>\n              <div className=\"mb-4 flex justify-center\">{statusInfo[statusResult.status].badge}</div>\n              <p className=\"text-muted-foreground\">{statusInfo[statusResult.status].message}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4540},"src/components/app/application-steps.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { PenSquare, Bot, Users } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\n\nconst steps = [\n  { icon: <PenSquare size={32} />, title: \"Step 1: Apply\", description: \"Fill out our straightforward application form.\", buttonText: \"Start Application\", href: \"#\", \"data-apply-btn\": true },\n  { icon: <Bot size={32} />, title: \"Step 2: Join Discord\", description: \"Become a part of our community on Discord.\", buttonText: \"Join Discord\", href: \"https://discord.com/invite/paRCYhJphH\" },\n  { icon: <Users size={32} />, title: \"Step 3: Interview\", description: \"Have a chat with our friendly recruitment team.\" },\n];\n\nexport function ApplicationSteps() {\n  return (\n    <section id=\"process\" className=\"py-16 md:py-24 bg-card\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-headline\">\n            Join The Convoy\n          </h2>\n          <p className=\"text-muted-foreground mt-2\">A simple three-step process to join our team.</p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {steps.map((step, index) => (\n            <Card key={index} className=\"flex flex-col text-center p-6 shadow-lg border-border/50 hover:shadow-primary/20 transition-shadow duration-300\">\n              <CardHeader className=\"items-center\">\n                <div className=\"p-4 bg-primary/10 rounded-full text-primary mb-4\">\n                  {step.icon}\n                </div>\n                <CardTitle className=\"font-headline text-2xl\">{step.title}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex-grow\">\n                <p className=\"text-muted-foreground\">{step.description}</p>\n              </CardContent>\n              {step.buttonText && step.href && (\n                <div className=\"mt-4\">\n                    <Button asChild className=\"rounded-full w-full\" {...(step['data-apply-btn'] ? { 'data-apply-btn': true } : {})}>\n                    <Link href={step.href} target={step.href.startsWith('http') ? '_blank' : '_self'}>{step.buttonText}</Link>\n                    </Button>\n                </div>\n              )}\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2391},"src/components/app/core-values.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Truck, Handshake, Shield, Flag, Calendar } from 'lucide-react';\nimport Image from 'next/image';\n\nconst values = [\n    {\n      icon: <Truck size={32} className=\"text-primary\" />,\n      title: 'Regular Convoys',\n      description: 'Weekly/monthly convoys across Europe & ProMods.',\n    },\n    {\n      icon: <Handshake size={32} className=\"text-primary\" />,\n      title: 'Friendly Community',\n      description: 'A family-like atmosphere, always ready to help.',\n    },\n    {\n      icon: <Shield size={32} className=\"text-primary\" />,\n      title: 'Professional Standards',\n      description: 'Realistic rules, safe convoys, and clean driving.',\n    },\n    {\n      icon: <Flag size={32} className=\"text-primary\" />,\n      title: 'Cultural Unity',\n      description: 'Representing Tamil pride and values globally.',\n    },\n    {\n      icon: <Calendar size={32} className=\"text-primary\" />,\n      title: 'Events & Partnerships',\n      description: 'Join international VTC events and collaborations.',\n    },\n];\n\nexport function CoreValues() {\n  return (\n    <section id=\"core-values\" className=\"relative py-16 md:py-24 bg-card\">\n      <div className=\"container mx-auto px-4 relative z-10\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 justify-center\">\n            {values.slice(0, 3).map((value, index) => (\n               <Card key={index} className=\"bg-card/80 backdrop-blur-sm text-center p-6 shadow-lg border-border/50 hover:shadow-primary/20 transition-shadow duration-300\">\n                    <CardContent className=\"flex flex-col items-center gap-4 pt-6\">\n                        {value.icon}\n                        <h3 className=\"text-xl font-headline text-primary\">{value.title}</h3>\n                        <p className=\"text-muted-foreground\">{value.description}</p>\n                    </CardContent>\n                </Card>\n            ))}\n        </div>\n         <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-8 mt-8 justify-center lg:max-w-4xl lg:mx-auto\">\n            {values.slice(3, 5).map((value, index) => (\n                <Card key={index} className=\"bg-card/80 backdrop-blur-sm text-center p-6 shadow-lg border-border/50 hover:shadow-primary/20 transition-shadow duration-300\">\n                    <CardContent className=\"flex flex-col items-center gap-4 pt-6\">\n                        {value.icon}\n                        <h3 className=\"text-xl font-headline text-primary\">{value.title}</h3>\n                        <p className=\"text-muted-foreground\">{value.description}</p>\n                    </CardContent>\n                </Card>\n            ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2742},"src/components/app/current-year.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\n\nexport function CurrentYear() {\n    const [year, setYear] = useState<number | null>(null);\n\n    useEffect(() => {\n        setYear(new Date().getFullYear());\n    }, []);\n\n    if (!year) {\n        // Return a placeholder or null to avoid hydration mismatch\n        return null;\n    }\n\n    return <span>{year}</span>;\n}\n","size_bytes":378},"src/components/app/event-booking-dialog.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { EventBookingForm } from './event-booking-form';\nimport type { SlotArea } from '@/lib/events';\n\ntype EventBookingDialogProps = {\n  eventId: string;\n  area: SlotArea;\n  availableSlots: number[];\n  children: React.ReactNode;\n};\n\nexport function EventBookingDialog({ eventId, area, availableSlots, children }: EventBookingDialogProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[800px]\">\n        <DialogHeader>\n          <DialogTitle>Request a Slot for {area.areaName}</DialogTitle>\n        </DialogHeader>\n        <EventBookingForm \n            onFormSubmit={() => setOpen(false)} \n            eventId={eventId}\n            areaId={area.id}\n            availableSlots={availableSlots}\n        />\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1088},"src/components/app/event-booking-form.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2 } from 'lucide-react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { submitBooking } from '@/app/events/[id]/actions';\n\n\nconst bookingFormSchema = z.object({\n  discordId: z.string().min(1, 'Discord ID is required'),\n  vtcName: z.string().min(1, 'VTC Name is required'),\n  position: z.string().min(1, 'Position is required'),\n  estimatedDrivers: z.coerce.number().min(1, 'Estimated drivers must be at least 1'),\n  truckersmpUrl: z.string().url('A valid TruckersMP URL is required'),\n  slotNumber: z.coerce.number({invalid_type_error: \"Please select a slot\"}).min(1, 'Please select a slot'),\n});\n\ntype BookingFormValues = z.infer<typeof bookingFormSchema>;\n\ntype EventBookingFormProps = {\n    onFormSubmit: () => void;\n    eventId: string;\n    areaId: string;\n    availableSlots: number[];\n};\n\nexport function EventBookingForm({ onFormSubmit, eventId, areaId, availableSlots }: EventBookingFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<BookingFormValues>({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      discordId: '',\n      vtcName: '',\n      position: 'Event Manager',\n      estimatedDrivers: 1,\n      truckersmpUrl: '',\n    },\n  });\n\n\n  async function onSubmit(data: BookingFormValues) {\n    setIsSubmitting(true);\n    const result = await submitBooking({ ...data, eventId, areaId });\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: 'Slot Request Submitted',\n        description: result.message,\n      });\n      form.reset();\n      onFormSubmit();\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.message || 'An error occurred',\n      });\n    }\n  }\n\n\n  return (\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField\n              control={form.control}\n              name=\"discordId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Discord ID</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. username or 123456789\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"vtcName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Your VTC Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. Tamil Pasanga\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             <FormField\n              control={form.control}\n              name=\"position\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Position in VTC</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. Event Manager\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             <FormField\n              control={form.control}\n              name=\"estimatedDrivers\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Estimated Drivers</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" placeholder=\"e.g. 5\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n            <FormField\n              control={form.control}\n              name=\"truckersmpUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>TruckersMP Link</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"https://truckersmp.com/vtc/...\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n             <FormField\n              control={form.control}\n              name=\"slotNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Select Slot</FormLabel>\n                   <Select onValueChange={field.onChange} defaultValue={String(field.value)}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"-- Choose Slot --\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                        {availableSlots.map(slot => (\n                            <SelectItem key={slot} value={String(slot)}>Slot #{slot}</SelectItem>\n                        ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          <Button type=\"submit\" className=\"w-full rounded-full\" size=\"lg\" disabled={isSubmitting}>\n            {isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Submitting Request...</> : 'Request Slot'}\n          </Button>\n        </form>\n      </Form>\n  );\n}\n","size_bytes":5906},"src/components/app/features.tsx":{"content":"\"use client\";\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Blocks, FileText, Store, Truck, Gamepad2, Users, ClipboardCheck, HeartHandshake, Trophy, LayoutDashboard, Award, Palette, Map, Milestone } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst features = [\n  { icon: <Blocks size={32} />, title: \"Division\", description: \"Structured divisions for various logistic operations.\" },\n  { icon: <FileText size={32} />, title: \"Contracts\", description: \"Take on diverse contracts and grow your career.\" },\n  { icon: <Store size={32} />, title: \"Marketplace\", description: \"A vibrant marketplace for all your logistical needs.\" },\n  { icon: <Truck size={32} />, title: \"Tours\", description: \"Participate in organized tours and special events.\" },\n  { icon: <Gamepad2 size={32} />, title: \"Garage HQ\", description: \"Manage your fleet from your personal headquarters.\" },\n  { icon: <Users size={32} />, title: \"Community\", description: \"Join a thriving community of drivers and enthusiasts.\" },\n  { icon: <ClipboardCheck size={32} />, title: \"Examination System\", description: \"Test and improve your driving skills with comprehensive examinations and practical assessments.\" },\n  { icon: <HeartHandshake size={32} />, title: \"Dedicated Staff\", description: \"Receive outstanding support and guidance from our experienced and friendly team.\" },\n  { icon: <Trophy size={32} />, title: \"Ranking System\", description: \"Rise through the leaderboards and earn recognition in our competitive ranking system.\" },\n  { icon: <LayoutDashboard size={32} />, title: \"Drivershub\", description: \"Access all essential tools, resources, and updates in one seamless, centralized hub.\" },\n  { icon: <Award size={32} />, title: \"Ranks\", description: \"Achieve prestigious ranks and badges by demonstrating dedication and exceptional performance.\" },\n  { icon: <Palette size={32} />, title: \"Custom UI, Cargo & Skins\", description: \"Express yourself by personalizing your interface, cargo, and vehicle skins with endless options.\" },\n  { icon: <Map size={32} />, title: \"Live Map\", description: \"Track your location and progress in real time with our interactive live map feature.\" },\n  { icon: <Users size={32} />, title: \"Discord Community\", description: \"Connect with fellow drivers, share experiences, and participate in events within our thriving Discord community.\" },\n  { icon: <Milestone size={32} />, title: \"Celestial Milestone Tracker\", description: \"Our drivers and pilots have journeyed incredible distances, pushing boundaries and breaking limits.\" },\n];\n\nconst INITIAL_VISIBLE_FEATURES = 6;\n\nexport function Features() {\n  const [showAll, setShowAll] = useState(false);\n\n  const visibleFeatures = showAll ? features : features.slice(0, INITIAL_VISIBLE_FEATURES);\n\n  return (\n    <section id=\"features\" className=\"py-16 md:py-24 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-headline\">Our Features</h2>\n          <p className=\"text-muted-foreground mt-2\">Everything you need for a premier logistics experience.</p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {visibleFeatures.map((feature, index) => (\n            <Card key={index} className=\"bg-card border-border/50 text-center p-6 shadow-lg hover:shadow-primary/20 transition-shadow duration-300\">\n              <CardHeader className=\"items-center\">\n                <div className=\"p-4 bg-primary/10 rounded-full text-primary mb-4\">\n                  {feature.icon}\n                </div>\n                <CardTitle className=\"font-headline text-2xl\">{feature.title}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">{feature.description}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        {!showAll && features.length > INITIAL_VISIBLE_FEATURES && (\n          <div className=\"text-center mt-12\">\n            <Button size=\"lg\" variant=\"outline\" className=\"rounded-full border-primary text-primary hover:bg-primary hover:text-primary-foreground\" onClick={() => setShowAll(true)}>\n              View All Features\n            </Button>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4424},"src/components/app/footer.tsx":{"content":"\nimport Link from 'next/link';\nimport { Logo } from '@/components/app/logo';\nimport { Button } from '@/components/ui/button';\nimport { CurrentYear } from './current-year';\n\nexport function Footer() {\n  return (\n    <footer className=\"py-12 bg-black text-muted-foreground\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div className=\"md:col-span-1\">\n            <Link href=\"/\" className=\"flex items-center gap-2 mb-4\">\n              <Logo size={64} />\n              <span className=\"text-lg font-headline animate-rgb-text bg-gradient-to-r from-red-500 via-green-500 to-blue-500 bg-clip-text text-transparent [background-size:200%_auto]\">Tamil Pasanga</span>\n            </Link>\n            <p className=\"text-sm\">Gateway to New Horizons.</p>\n          </div>\n          <div className=\"md:col-span-1\">\n            <h4 className=\"font-semibold text-white mb-4\">Links</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/about\" className=\"hover:text-primary transition-colors\">About</Link></li>\n              <li><Link href=\"/features\" className=\"hover:text-primary transition-colors\">Features</Link></li>\n              <li><Link href=\"/gallery\" className=\"hover:text-primary transition-colors\">Gallery</Link></li>\n              <li><Link href=\"/events\" className=\"hover:text-primary transition-colors\">Events</Link></li>\n              <li><Link href=\"/news\" className=\"hover:text-primary transition-colors\">News</Link></li>\n              <li><Link href=\"/admin\" className=\"hover:text-primary transition-colors\">Admin</Link></li>\n            </ul>\n          </div>\n          <div className=\"md:col-span-1\">\n            <h4 className=\"font-semibold text-white mb-4\">Community</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"https://discord.com/invite/paRCYhJphH\" target=\"_blank\" className=\"hover:text-primary transition-colors\">Discord</Link></li>\n              <li><Link href=\"https://truckersmp.com/vtc/73933\" target=\"_blank\" className=\"hover:text-primary transition-colors\">TruckersMP</Link></li>\n            </ul>\n          </div>\n          <div className=\"md:col-span-1 space-y-4\">\n            <Button variant=\"outline\" className=\"w-full rounded-full border-primary text-primary hover:bg-primary hover:text-primary-foreground\" asChild>\n              <Link href=\"/maintenance\">Drivers Hub</Link>\n            </Button>\n            <Button className=\"w-full rounded-full\" data-apply-btn>\n                Apply Now\n            </Button>\n          </div>\n        </div>\n        <div className=\"border-t border-border/50 pt-8 text-center text-sm\">\n          <p>&copy; <CurrentYear /> Tamil Pasanga. All Rights Reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2813},"src/components/app/header.tsx":{"content":"'use client';\n\nimport Link from 'next/link';\nimport { Logo } from '@/components/app/logo';\nimport { Button } from '@/components/ui/button';\nimport { ChevronDown, Menu } from 'lucide-react';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu';\nimport { usePathname } from 'next/navigation';\nimport { cn } from '@/lib/utils';\n\nconst navLinks = [\n  { href: '/', label: 'Home' },\n  { href: '/about', label: 'About' },\n  { href: '/features', label: 'Features' },\n  { href: '/events', label: 'Events' },\n  { href: '/staff', label: 'Staff' },\n  { href: '/gallery', label: 'Gallery' },\n];\n\nexport function Header() {\n  const pathname = usePathname();\n\n  return (\n    <header className=\"py-4 px-4 sm:px-6 lg:px-8 w-full absolute top-0 z-20 bg-gradient-to-b from-black/70 to-transparent\">\n      <div className=\"container mx-auto flex justify-between items-center\">\n        <Link href=\"/\" className=\"flex items-center gap-2\">\n          <Logo size={48} />\n          <span className=\"text-xl font-headline text-white\">Tamil Pasanga</span>\n        </Link>\n        <nav className=\"hidden md:flex items-center gap-6 text-sm text-white\">\n          {navLinks.slice(0, 1).map((link) => (\n             <Link\n              key={link.href + link.label}\n              href={link.href}\n              className={cn(\"hover:text-primary transition-colors\", pathname === link.href && \"text-primary underline underline-offset-4\")}\n            >\n              {link.label}\n            </Link>\n          ))}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                className=\"flex items-center gap-1 hover:text-primary hover:bg-transparent text-sm text-white p-0\"\n              >\n                Application <ChevronDown className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem data-apply-btn>Apply Now</DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem asChild>\n                <Link href=\"/application-status\">Check Status</Link>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n          {navLinks.slice(1).map((link) => (\n            <Link\n              key={link.href + link.label}\n              href={link.href}\n              className={cn(\"hover:text-primary transition-colors\", pathname === link.href && \"text-primary underline underline-offset-4\")}\n            >\n              {link.label}\n            </Link>\n          ))}\n        </nav>\n        <div className=\"md:hidden\">\n          <Sheet>\n            <SheetTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\">\n                <Menu className=\"h-6 w-6 text-white\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"bg-background text-white\">\n              <div className=\"flex flex-col gap-6 p-6\">\n                <Link href=\"/\" className=\"flex items-center gap-2\">\n                  <Logo size={48} />\n                  <span className=\"text-xl font-headline\">Tamil Pasanga</span>\n                </Link>\n                <nav className=\"flex flex-col gap-4 text-lg\">\n                   {navLinks.slice(0,1).map((link) => (\n                     <Link\n                      key={link.href + link.label}\n                      href={link.href}\n                      className={cn(\"hover:text-primary transition-colors\", pathname === link.href && \"text-primary underline underline-offset-4\")}\n                    >\n                      {link.label}\n                    </Link>\n                   ))}\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        variant=\"ghost\"\n                        className=\"flex items-center justify-start gap-1 hover:text-primary hover:bg-transparent text-lg text-white p-0\"\n                      >\n                        Application <ChevronDown className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent>\n                      <DropdownMenuItem data-apply-btn>Apply Now</DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/application-status\">Check Status</Link>\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                  {navLinks.slice(1).map((link) => (\n                    <Link\n                      key={link.href + link.label}\n                      href={link.href}\n                      className={cn(\"hover:text-primary transition-colors\", pathname === link.href && \"text-primary underline underline-offset-4\")}\n                    >\n                      {link.label}\n                    </Link>\n                  ))}\n                </nav>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5276},"src/components/app/hero.tsx":{"content":"\n'use client';\n\nimport Image from 'next/image';\nimport { Button } from '@/components/ui/button';\nimport { PlaceHolderImages } from '@/lib/placeholder-images';\nimport Link from 'next/link';\nimport {\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n} from '@/components/ui/carousel';\nimport Autoplay from 'embla-carousel-autoplay';\nimport * as React from 'react';\nimport { Truck } from 'lucide-react';\n\nconst DiscordIcon = () => (\n  <svg\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"currentColor\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path d=\"M20.317 4.36981C18.7915 3.72551 17.1857 3.28682 15.5292 3.09602C15.4239 3.36442 15.2891 3.72551 15.1838 3.99391C13.2435 3.63282 11.3159 3.63282 9.3883 3.99391C9.2702 3.72551 9.1355 3.36442 9.0302 3.09602C7.37371 3.28682 5.76792 3.72551 4.24243 4.36981C1.6917 8.16112 1.03961 11.898 1.9427 15.5422C3.73711 16.9832 5.56092 17.9351 7.42433 18.5794C7.79523 18.2183 8.13672 17.8315 8.44882 17.4191C8.01422 17.1801 7.59242 16.9283 7.18342 16.66C7.03851 16.5413 6.89361 16.4226 6.74871 16.2911C6.71931 16.2655 6.67711 16.2399 6.64771 16.2142C6.64771 16.2142 6.63501 16.2014 6.62221 16.1887C8.42931 17.3015 10.3862 17.9057 12.4173 17.9057C14.4483 17.9057 16.4052 17.3015 18.2124 16.1887C18.2007 16.2004 18.188 16.2142 18.188 16.2142C18.1586 16.2399 18.1164 16.2655 18.087 16.2911C17.9421 16.4226 17.7972 16.5413 17.6523 16.66C17.2433 16.9283 16.8215 17.1801 16.3869 17.4191C16.7118 17.8315 17.0405 18.2183 17.4114 18.5794C19.2748 17.9351 21.0986 16.9832 22.893 15.5422C23.8357 11.4593 23.0118 7.74971 20.317 4.36981ZM9.68069 13.848C8.68989 13.848 7.88939 12.9158 7.88939 11.783C7.88939 10.6502 8.67709 9.718 9.68069 9.718C10.6843 9.718 11.4848 10.6502 11.472 11.783C11.472 12.9158 10.6843 13.848 9.68069 13.848ZM14.8517 13.848C13.8609 13.848 13.0604 12.9158 13.0604 11.783C13.0604 10.6502 13.8481 9.718 14.8517 9.718C15.8553 9.718 16.6558 10.6502 16.643 11.783C16.643 12.9158 15.8553 13.848 14.8517 13.848Z\"/>\n  </svg>\n);\n\nconst heroSlides = [\n  {\n    id: 'hero-1',\n    title: 'Great Experience',\n    subtitle: 'We Believe In Quality Not Quantity',\n    buttonText: 'Apply',\n    buttonLink: '#',\n    imageId: 'hero-truck',\n    'data-apply-btn': true,\n  },\n  {\n    id: 'hero-2',\n    title: 'Our Mission',\n    subtitle: 'Delivering excellence in logistics and teamwork.',\n    buttonText: 'TruckersMP',\n    buttonLink: 'https://truckersmp.com/vtc/73933',\n    imageId: 'hero-truck-2',\n    icon: <Truck />,\n  },\n  {\n    id: 'hero-3',\n    title: 'Join Us',\n    subtitle: 'Be part of something bigger.',\n    buttonText: 'Discord',\n    buttonLink: 'https://discord.com/invite/paRCYhJphH',\n    imageId: 'hero-truck-3',\n    icon: <DiscordIcon />,\n  }\n];\n\nexport function Hero() {\n  const plugin = React.useRef(\n    Autoplay({ delay: 2000, stopOnInteraction: true })\n  );\n\n  return (\n    <Carousel\n      className=\"w-full\"\n      plugins={[plugin.current]}\n      onMouseEnter={plugin.current.stop}\n      onMouseLeave={plugin.current.reset}\n    >\n      <CarouselContent>\n        {heroSlides.map((slide) => {\n          const image = PlaceHolderImages.find((img) => img.id === slide.imageId);\n          const buttonProps = { ...(slide['data-apply-btn'] ? { 'data-apply-btn': true } : {})};\n          return (\n            <CarouselItem key={slide.id}>\n              <section className=\"relative h-[80vh] w-full flex items-center justify-center text-white\">\n                {image && (\n                  <Image\n                    src={image.imageUrl}\n                    alt={image.description}\n                    fill\n                    className=\"object-cover\"\n                    data-ai-hint={image.imageHint}\n                    priority={heroSlides.indexOf(slide) === 0}\n                  />\n                )}\n                <div className=\"absolute inset-0 bg-black/60\" />\n                <div className=\"relative z-10 text-center p-4\">\n                  <h1 className=\"text-5xl md:text-7xl font-headline font-bold drop-shadow-lg animate-rgb-text bg-gradient-to-r from-primary via-blue-500 to-red-500 bg-clip-text text-transparent [background-size:200%_auto]\">\n                    TAMIL PASANGA\n                  </h1>\n                  <p className=\"mt-4 text-2xl md:text-4xl font-semibold drop-shadow-md\">\n                    {slide.title}\n                  </p>\n                  <p className=\"mt-2 text-lg md:text-xl text-muted-foreground drop-shadow-md\">\n                    {slide.subtitle}\n                  </p>\n                  {slide.buttonText && slide.buttonLink && (\n                    <Button asChild size=\"lg\" className=\"mt-8 rounded-full\" {...buttonProps}>\n                        <Link href={slide.buttonLink} target={slide.buttonLink.startsWith('http') ? '_blank' : '_self'}>\n                        {slide.icon}\n                        {slide.buttonText}\n                        </Link>\n                    </Button>\n                  )}\n                </div>\n              </section>\n            </CarouselItem>\n          );\n        })}\n      </CarouselContent>\n    </Carousel>\n  );\n}\n","size_bytes":5063},"src/components/app/logo.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\n\nexport function Logo({ className, size = 28 }: { className?: string; size?: number }) {\n  return (\n    <Image\n      src=\"https://cdn.discordapp.com/attachments/812969396540145694/1420219258834518171/unwatermark_1000037663.gif?ex=68d499c1&is=68d34841&hm=82d9ffaae644401634e086307d8324354e2c4af16d7cca6220ac687671b78a30&\"\n      alt=\"Tamil Pasanga Logo\"\n      width={size}\n      height={size}\n      className={cn(className)}\n      unoptimized\n    />\n  );\n}\n","size_bytes":521},"src/components/app/newsletter.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport Image from 'next/image';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Calendar, User } from 'lucide-react';\nimport Link from 'next/link';\nimport { cn } from '@/lib/utils';\nimport type { NewsArticle } from '@/lib/news-articles';\n\ntype NewsletterProps = {\n  articles: (NewsArticle & {\n    imageUrl?: string;\n    imageDescription?: string;\n    imageHint?: string;\n  })[];\n};\n\nexport function Newsletter({ articles }: NewsletterProps) {\n  const [expandedArticles, setExpandedArticles] = useState<Record<string, boolean>>({});\n\n  const toggleReadMore = (articleId: string) => {\n    setExpandedArticles(prev => ({\n      ...prev,\n      [articleId]: !prev[articleId],\n    }));\n  };\n\n  return (\n    <section id=\"news\" className=\"py-16 md:py-24 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-headline\">Latest News</h2>\n          <p className=\"text-muted-foreground mt-2\">Stay up-to-date with the latest from Tamil Pasanga.</p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {articles.map((item) => {\n            const isExpanded = expandedArticles[item.id];\n            return (\n              <Card key={item.id} className=\"flex flex-col bg-card border-border/50 shadow-lg hover:shadow-primary/20 transition-shadow duration-300\">\n                {item.imageUrl && (\n                  <div className=\"relative h-48 w-full\">\n                    <Image\n                      src={item.imageUrl}\n                      alt={item.imageDescription || ''}\n                      fill\n                      className=\"object-cover\"\n                      data-ai-hint={item.imageHint}\n                      sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n                    />\n                  </div>\n                )}\n                <CardHeader>\n                  <CardTitle className=\"font-headline text-xl\">{item.title}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex-grow space-y-2 text-sm text-muted-foreground\">\n                  <p className={cn(\"mb-4\", !isExpanded && \"line-clamp-3\")}>{item.description}</p>\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{item.date}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <User className=\"h-4 w-4\" />\n                    <span>By {item.author}</span>\n                  </div>\n                </CardContent>\n                <CardFooter>\n                   <Button variant=\"link\" className=\"text-primary p-0\" onClick={() => toggleReadMore(item.id)}>\n                      {isExpanded ? 'Read Less' : 'Read More'} &rarr;\n                   </Button>\n                </CardFooter>\n              </Card>\n            );\n          })}\n        </div>\n        <div className=\"text-center mt-12\">\n            <Button size=\"lg\" variant=\"outline\" className=\"rounded-full border-primary text-primary hover:bg-primary hover:text-primary-foreground\" asChild>\n                <Link href=\"/news\">View All News</Link>\n            </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3449},"src/components/app/snow-effect.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from 'react';\n\nconst SNOWFLAKE_COUNT = 100;\n\nexport function SnowEffect() {\n    const [snowflakes, setSnowflakes] = useState<JSX.Element[]>([]);\n\n    useEffect(() => {\n        const createSnowflakes = () => {\n            const newSnowflakes = Array.from({ length: SNOWFLAKE_COUNT }).map((_, index) => {\n                const style: React.CSSProperties = {\n                    left: `${Math.random() * 100}vw`,\n                    animationDuration: `${Math.random() * 5 + 5}s`,\n                    animationDelay: `${Math.random() * 5}s`,\n                    width: `${Math.random() * 4 + 2}px`,\n                    height: `${Math.random() * 4 + 2}px`,\n                    opacity: Math.random() * 0.5 + 0.3,\n                };\n                return <div key={index} className=\"snowflake\" style={style} />;\n            });\n            setSnowflakes(newSnowflakes);\n        };\n\n        createSnowflakes();\n    }, []);\n\n    return <>{snowflakes}</>;\n};\n","size_bytes":1006},"src/components/app/testimonial.tsx":{"content":"import Image from 'next/image';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { PlaceHolderImages } from '@/lib/placeholder-images';\n\nconst testimonialImage = PlaceHolderImages.find(img => img.id === 'testimonial-avatar');\n\nexport function Testimonial() {\n  return (\n    <section className=\"py-16 md:py-24 bg-card\">\n      <div className=\"container mx-auto px-4 max-w-3xl text-center\">\n        {testimonialImage && (\n          <Image\n            src={testimonialImage.imageUrl}\n            alt={testimonialImage.description}\n            width={100}\n            height={100}\n            className=\"rounded-full mx-auto mb-6 border-4 border-primary shadow-lg\"\n            data-ai-hint={testimonialImage.imageHint}\n          />\n        )}\n        <Card className=\"bg-transparent border-0 shadow-none\">\n          <CardContent className=\"p-0\">\n            <blockquote className=\"text-xl md:text-2xl italic\">\n              “Tamil Pasanga has been a game-changer for my virtual trucking experience. The community is fantastic, and the management truly cares about its drivers. It’s more than just a VTC; it’s a family.”\n            </blockquote>\n            <p className=\"mt-6 font-semibold text-lg\">Powerful Gaming</p>\n            <p className=\"text-sm text-primary\">Managing Director</p>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1385},"src/components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1991},"src/components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4434},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"src/components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2709},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"src/components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6224},"src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10479},"src/components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1070},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7433},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":724},"src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8505},"src/components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1244},"src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"src/components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1481},"src/components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1656},"src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5629},"src/components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":770},"src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23381},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1091},"src/components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1153},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1897},"src/components/ui/textarea.tsx":{"content":"import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n","size_bytes":709},"src/components/ui/toast.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4859},"src/components/ui/toaster.tsx":{"content":"\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1159},"src/app/admin/applications/actions.tsx":{"content":"\n'use client';\n\nimport { useTransition, useState } from 'react';\nimport { updateApplicationStatus as updateStatusAction, updateBookingStatus as updateBookingAction } from './server-actions';\nimport type { ApplicationStatus } from '@/lib/applications';\nimport { DropdownMenuItem, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuPortal, DropdownMenuRadioGroup, DropdownMenuRadioItem } from '@/components/ui/dropdown-menu';\nimport { CheckCircle, XCircle, AlertCircle, Loader2, PauseCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst roleOptions = [\n    'Managing Director', 'Marketing Executive', 'Human Resource Staff', 'Trainer',\n    'Event Staff', 'Event Organizer', 'Media Staff', 'Media Editor',\n    'Senior Driver', 'Driver', 'Trainee'\n];\n\nconst statusConfig = {\n    Accepted: { icon: <CheckCircle className=\"mr-2 h-4 w-4\" />, label: 'Accept', className: 'text-green-500' },\n    Rejected: { icon: <XCircle className=\"mr-2 h-4 w-4\" />, label: 'Reject', className: 'text-red-500' },\n    Interview: { icon: <AlertCircle className=\"mr-2 h-4 w-4\" />, label: 'Mark for Interview', className: 'text-blue-500' },\n    Pending: { icon: <div/>, label: 'Pending', className: ''}\n};\n\n\nexport function UpdateApplicationStatus({\n  applicationId,\n  status,\n  currentStatus,\n}: {\n  applicationId: string;\n  status: ApplicationStatus;\n  currentStatus: ApplicationStatus;\n}) {\n  const [isPending, startTransition] = useTransition();\n  const [selectedRole, setSelectedRole] = useState('Trainee');\n  const { toast } = useToast();\n  const config = statusConfig[status];\n\n  const handleUpdate = (role?: string) => {\n    startTransition(async () => {\n      const result = await updateStatusAction(applicationId, status, role);\n      if (result.success) {\n        toast({ title: 'Success', description: 'Application status updated.' });\n      } else {\n        toast({ variant: 'destructive', title: 'Error', description: result.message });\n      }\n    });\n  };\n  \n  const isDisabled = isPending || currentStatus === status;\n\n\n  if (status === 'Accepted') {\n    return (\n       <DropdownMenuSub>\n        <DropdownMenuSubTrigger\n          disabled={isDisabled}\n          className={config.className}\n        >\n          {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : config.icon}\n          {config.label}\n        </DropdownMenuSubTrigger>\n        <DropdownMenuPortal>\n            <DropdownMenuSubContent>\n                <DropdownMenuRadioGroup value={selectedRole} onValueChange={setSelectedRole}>\n                    {roleOptions.map((role) => (\n                        <DropdownMenuRadioItem key={role} value={role}>\n                            {role}\n                        </DropdownMenuRadioItem>\n                    ))}\n                </DropdownMenuRadioGroup>\n                <DropdownMenuItem\n                    onClick={() => handleUpdate(selectedRole)}\n                    className=\"mt-2 justify-center bg-primary text-primary-foreground hover:bg-primary/90 focus:bg-primary focus:text-primary-foreground\"\n                >\n                    Confirm Acceptance\n                </DropdownMenuItem>\n            </DropdownMenuSubContent>\n        </DropdownMenuPortal>\n      </DropdownMenuSub>\n    );\n  }\n\n\n  return (\n    <DropdownMenuItem\n      onClick={() => handleUpdate()}\n      disabled={isDisabled}\n      className={config.className}\n      onSelect={(e) => e.preventDefault()}\n    >\n      {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : config.icon}\n      {config.label}\n    </DropdownMenuItem>\n  );\n}\n\nexport function UpdateBookingStatus({\n    eventId,\n    areaId,\n    bookingId,\n    newStatus,\n}: {\n    eventId: string;\n    areaId: string;\n    bookingId: string;\n    newStatus: 'approved' | 'rejected' | 'hold';\n}) {\n    const [isPending, startTransition] = useTransition();\n    const { toast } = useToast();\n    \n    let icon, label, className;\n\n    switch (newStatus) {\n        case 'approved':\n            icon = <CheckCircle className=\"mr-2 h-4 w-4 text-green-500\" />;\n            label = 'Approve';\n            className = 'text-green-500';\n            break;\n        case 'rejected':\n            icon = <XCircle className=\"mr-2 h-4 w-4 text-red-500\" />;\n            label = 'Reject';\n            className = 'text-red-500';\n            break;\n        case 'hold':\n            icon = <PauseCircle className=\"mr-2 h-4 w-4 text-yellow-500\" />;\n            label = 'Put on Hold';\n            className = 'text-yellow-500';\n            break;\n    }\n\n\n    const handleUpdate = () => {\n        startTransition(async () => {\n            const result = await updateBookingAction(eventId, areaId, bookingId, newStatus);\n            if (result.success) {\n                toast({ title: 'Success', description: result.message });\n            } else {\n                toast({ variant: 'destructive', title: 'Error', description: result.message });\n            }\n        });\n    };\n\n    return (\n        <DropdownMenuItem\n            onClick={handleUpdate}\n            disabled={isPending}\n            className={className}\n            onSelect={(e) => e.preventDefault()}\n        >\n            {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : icon}\n            {label}\n        </DropdownMenuItem>\n    );\n}\n","size_bytes":5308},"src/app/admin/applications/page.tsx":{"content":"\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Footer } from \"@/components/app/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport type { Application } from \"@/lib/applications\";\nimport { CheckCircle, Clock, FileText, MoreHorizontal, XCircle, AlertCircle, ChevronDown, ChevronUp, PauseCircle } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { format } from 'date-fns';\nimport { UpdateApplicationStatus, UpdateBookingStatus } from \"./actions\";\nimport { getApplications, getEventsWithBookings } from './server-actions';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport type { Event } from '@/lib/events';\n\nconst statusInfo = {\n    Accepted: { icon: <CheckCircle className=\"h-4 w-4 text-green-500\" />, badge: <Badge variant=\"default\" className=\"bg-green-500\">Accepted</Badge> },\n    Pending: { icon: <Clock className=\"h-4 w-4 text-yellow-500\" />, badge: <Badge variant=\"secondary\" className=\"bg-yellow-500\">Pending</Badge> },\n    Rejected: { icon: <XCircle className=\"h-4 w-4 text-red-500\" />, badge: <Badge variant=\"destructive\">Rejected</Badge> },\n    Interview: { icon: <AlertCircle className=\"h-4 w-4 text-blue-500\" />, badge: <Badge className=\"bg-blue-500\">Interview</Badge> },\n};\n\nconst bookingStatusInfo = {\n    approved: { badge: <Badge className='bg-green-500'>Approved</Badge> },\n    pending: { badge: <Badge className='bg-yellow-500'>Pending</Badge> },\n    rejected: { badge: <Badge className='bg-red-500'>Rejected</Badge> },\n    hold: { badge: <Badge className='bg-orange-500'>On Hold</Badge> },\n};\n\n\nfunction ApplicationRow({ app }: { app: Application }) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n        <React.Fragment>\n            <TableRow>\n                <TableCell>\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => setIsOpen(!isOpen)} className=\"group\">\n                        <ChevronDown className={isOpen ? \"hidden\" : \"h-4 w-4\"} />\n                        <ChevronUp className={isOpen ? \"h-4 w-4\" : \"hidden\"} />\n                    </Button>\n                </TableCell>\n                <TableCell className=\"font-medium\">{app.id}</TableCell>\n                <TableCell>{app.name}</TableCell>\n                <TableCell>{app.discordTag}</TableCell>\n                <TableCell>{format(new Date(app.submittedAt), 'PPp')}</TableCell>\n                <TableCell>{statusInfo[app.status]?.badge || app.status}</TableCell>\n                <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                            <span className=\"sr-only\">Open menu</span>\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                            <UpdateApplicationStatus applicationId={app.id} status=\"Accepted\" currentStatus={app.status} />\n                            <UpdateApplicationStatus applicationId={app.id} status=\"Rejected\" currentStatus={app.status} />\n                            <UpdateApplicationStatus applicationId={app.id} status=\"Interview\" currentStatus={app.status} />\n                        </DropdownMenuContent>\n                    </DropdownMenu>\n                </TableCell>\n            </TableRow>\n            {isOpen && (\n                <TableRow className=\"bg-muted/50\">\n                    <TableCell colSpan={7} className=\"p-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                            <div><strong>Email:</strong> {app.email}</div>\n                            <div><strong>Experience:</strong> <span className=\"capitalize\">{app.experience}</span></div>\n                            <div>\n                                <strong>Steam Profile:</strong>\n                                <Link href={app.steamUrl} target=\"_blank\" className=\"text-primary hover:underline ml-2\">View Profile</Link>\n                            </div>\n                            <div className=\"col-span-full\">\n                                <strong>How they found us:</strong> <span className=\"capitalize\">{app.howYouFound}</span>\n                                {app.howYouFound === 'friends' && app.friendsMention && ` - ${app.friendsMention}`}\n                                {app.howYouFound === 'others' && app.othersMention && ` - ${app.othersMention}`}\n                            </div>\n                        </div>\n                    </TableCell>\n                </TableRow>\n            )}\n        </React.Fragment>\n    );\n}\n\nfunction BookingRow({ event, area, booking }: { event: Event; area: NonNullable<Event['slots']>[0]; booking: NonNullable<NonNullable<Event['slots']>[0]['bookings']>[0] }) {\n  return (\n     <TableRow>\n        <TableCell></TableCell>\n        <TableCell className=\"font-medium\">{booking.id}</TableCell>\n        <TableCell>{booking.vtcName}</TableCell>\n        <TableCell>{event.title}</TableCell>\n        <TableCell>Slot #{booking.slotNumber} ({area.areaName})</TableCell>\n        <TableCell>{bookingStatusInfo[booking.status]?.badge || booking.status}</TableCell>\n        <TableCell className=\"text-right\">\n             <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"h-8 w-8 p-0\" disabled={booking.status === 'approved' || booking.status === 'rejected'}>\n                    <span className=\"sr-only\">Open menu</span>\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                    <UpdateBookingStatus eventId={event.id} areaId={area.id} bookingId={booking.id} newStatus=\"approved\" />\n                    <UpdateBookingStatus eventId={event.id} areaId={area.id} bookingId={booking.id} newStatus=\"rejected\" />\n                    <UpdateBookingStatus eventId={event.id} areaId={area.id} bookingId={booking.id} newStatus=\"hold\" />\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </TableCell>\n    </TableRow>\n  );\n}\n\n\nexport default function ApplicationsAdminPage() {\n    const [applications, setApplications] = useState<Application[]>([]);\n    const [bookingEvents, setBookingEvents] = useState<Event[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        async function loadData() {\n            setIsLoading(true);\n            try {\n                const [fetchedApplications, fetchedEvents] = await Promise.all([\n                    getApplications(),\n                    getEventsWithBookings()\n                ]);\n                setApplications(fetchedApplications);\n                setBookingEvents(fetchedEvents);\n            } catch (error) {\n                console.error(\"Failed to load data:\", error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        loadData();\n    }, []);\n    \n    const allBookings = bookingEvents.flatMap(event => \n        event.slots?.flatMap(area => \n            area.bookings?.map(booking => ({ event, area, booking })) || []\n        ) || []\n    );\n\n\n    return (\n        <div className=\"flex flex-col min-h-screen bg-background\">\n            <main className=\"flex-grow p-4 md:p-8\">\n                <div className=\"max-w-7xl mx-auto\">\n                    <div className=\"flex items-center justify-between mb-8\">\n                        <h1 className=\"text-3xl font-headline flex items-center gap-2\">\n                            <FileText />\n                            Manage Applications & Bookings\n                        </h1>\n                    </div>\n\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>All Applications</CardTitle>\n                            <CardDescription>\n                                {isLoading ? 'Loading applications...' : `${applications.length} application(s) found.`}\n                            </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead className=\"w-12\"></TableHead>\n                                        <TableHead>ID</TableHead>\n                                        <TableHead>Name</TableHead>\n                                        <TableHead>Discord Tag</TableHead>\n                                        <TableHead>Submitted At</TableHead>\n                                        <TableHead>Status</TableHead>\n                                        <TableHead className=\"text-right\">Actions</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    {isLoading ? (\n                                        Array.from({ length: 5 }).map((_, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell colSpan={7}>\n                                                    <Skeleton className=\"h-8 w-full\" />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    ) : (\n                                        applications.map((app) => (\n                                            <ApplicationRow key={app.id} app={app} />\n                                        ))\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </CardContent>\n                    </Card>\n                    \n                     <Card className=\"mt-8\">\n                        <CardHeader>\n                            <CardTitle>Slot Booking Requests</CardTitle>\n                            <CardDescription>\n                                {isLoading ? 'Loading booking requests...' : `${allBookings.length} booking request(s) found.`}\n                            </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                           <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead className=\"w-12\"></TableHead>\n                                        <TableHead>Booking ID</TableHead>\n                                        <TableHead>VTC Name</TableHead>\n                                        <TableHead>Event</TableHead>\n                                        <TableHead>Slot</TableHead>\n                                        <TableHead>Status</TableHead>\n                                        <TableHead className=\"text-right\">Actions</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                     {isLoading ? (\n                                        Array.from({ length: 3 }).map((_, index) => (\n                                            <TableRow key={`booking-skel-${index}`}>\n                                                <TableCell colSpan={7}>\n                                                    <Skeleton className=\"h-8 w-full\" />\n                                                </TableCell>\n                                            </TableRow>\n                                        ))\n                                    ) : allBookings.length > 0 ? (\n                                        allBookings.map(({ event, area, booking }) => (\n                                            <BookingRow key={booking.id} event={event} area={area} booking={booking} />\n                                        ))\n                                    ) : (\n                                        <TableRow>\n                                            <TableCell colSpan={7} className=\"text-center\">No booking requests found.</TableCell>\n                                        </TableRow>\n                                    )}\n                                </TableBody>\n                            </Table>\n                        </CardContent>\n                    </Card>\n\n                     <div className=\"mt-8 text-center\">\n                        <Button variant=\"outline\" asChild>\n                            <Link href=\"/admin\">Back to Admin</Link>\n                        </Button>\n                    </div>\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","size_bytes":13289},"src/app/admin/applications/server-actions.ts":{"content":"\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport type { ApplicationStatus, ApplicationsData, Application } from '@/lib/applications';\nimport type { StaffData, StaffMember } from '@/lib/staff-members';\nimport type { EventsData, Event, Booking, BookingStatus } from '@/lib/events';\n\nconst applicationsFilePath = path.join(process.cwd(), 'src', 'lib', 'applications.json');\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            if (filePath.includes('applications.json')) {\n                return { applications: [] } as T;\n            }\n            if (filePath.includes('staff-members.json')) {\n                return { staffMembers: [] } as T;\n            }\n             if (filePath.includes('events.json')) {\n                return { events: [] } as T;\n            }\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile<T>(filePath: string, data: T): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nasync function sendApplicationWebhookNotification(application: Application) {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n\n    switch (application.status) {\n        case 'Accepted':\n            title = `Application Accepted: ${application.id}`;\n            color = 5763719; // Green\n            description = `Congratulations to **${application.name}**! Their application has been accepted.`;\n            break;\n        case 'Rejected':\n            title = `Application Rejected: ${application.id}`;\n            color = 15548997; // Red\n            description = `Application for **${application.name}** has been rejected.`;\n            break;\n        case 'Interview':\n            title = `Application Moved to Interview: ${application.id}`;\n            color = 3447003; // Blue\n            description = `**${application.name}** has been moved to the interview stage.`;\n            break;\n        default:\n            return; // Don't send for 'Pending' or other statuses\n    }\n\n    const embed = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        fields: [\n            { name: 'Applicant Name', value: application.name, inline: true },\n            { name: 'Discord Tag', value: application.discordTag, inline: true },\n        ],\n        footer: {\n            text: 'Tamil Pasanga VTC | Application Status Update',\n        },\n    };\n\n    const payload = { embeds: [embed] };\n\n    try {\n        const response = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n            console.error(`Discord webhook failed with status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error('Error sending Discord webhook notification:', error);\n    }\n}\n\n\nexport async function getApplications(): Promise<Application[]> {\n    const data = await readJsonFile<ApplicationsData>(applicationsFilePath);\n    // Sort by submission date, newest first\n    return data.applications.sort((a, b) => new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime());\n}\n\nexport async function updateApplicationStatus(\n  applicationId: string,\n  newStatus: ApplicationStatus,\n  role?: string\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const applicationsData = await readJsonFile<ApplicationsData>(applicationsFilePath);\n        const staffData = await readJsonFile<StaffData>(staffFilePath);\n\n        const appIndex = applicationsData.applications.findIndex((app) => app.id === applicationId);\n\n        if (appIndex === -1) {\n            return { success: false, message: `Application with ID ${applicationId} not found.` };\n        }\n        \n        const application = applicationsData.applications[appIndex];\n        \n        // Update status in applications.json\n        application.status = newStatus;\n        await writeJsonFile(applicationsFilePath, applicationsData);\n\n        // If accepted, add to staff-members.json if not already present\n        if (newStatus === 'Accepted') {\n            const isAlreadyStaff = staffData.staffMembers.some(member => member.name === application.name);\n            if (!isAlreadyStaff) {\n                const newMember: StaffMember = {\n                    id: `staff-${Date.now()}`,\n                    name: application.name,\n                    role: role || 'Trainee',\n                    imageId: 'testimonial-avatar',\n                    imageUrl: \"https://media.discordapp.net/attachments/1116720480544636999/1274425873201631304/TP_NEW_WB_PNGxxxhdpi.png?ex=68d4d8d5&is=68d38755&hm=b6d4e0e4ef2c3215a4de4fb2f592189a60ddd94c651f96fe04deac2e7f96ddc6&=&format=webp&quality=lossless&width=826&height=826\",\n                    steamUrl: application.steamUrl,\n                    truckersmpUrl: \"\",\n                };\n                staffData.staffMembers.push(newMember);\n                await writeJsonFile(staffFilePath, staffData);\n            }\n        }\n\n        revalidatePath('/admin/applications');\n        revalidatePath('/staff');\n        \n        // Send Discord notification\n        await sendApplicationWebhookNotification(application);\n\n        return { success: true, message: 'Application status updated successfully.' };\n    } catch (error) {\n        console.error('Error updating application status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n\n// --- Booking Actions ---\n\nexport async function getEventsWithBookings(): Promise<Event[]> {\n    const data = await readJsonFile<EventsData>(eventsFilePath);\n    return data.events.filter(event => event.slots && event.slots.some(slot => slot.bookings && slot.bookings.length > 0));\n}\n\nasync function sendBookingWebhookNotification(booking: Booking, event: Event, newStatus: BookingStatus, areaId: string) {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    let title = '';\n    let color = 0;\n    let description = '';\n    let imageUrl = '';\n    \n    const area = event.slots?.find(a => a.id === areaId);\n\n    switch (newStatus) {\n        case 'approved':\n            title = `Booking Approved: ${booking.vtcName}`;\n            color = 5763719; // Green\n            description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been approved.`;\n             if (area) {\n                imageUrl = area.imageUrl;\n            }\n            break;\n        case 'rejected':\n             title = `Booking Rejected: ${booking.vtcName}`;\n            color = 15548997; // Red\n            description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been rejected.`;\n            break;\n        case 'hold':\n            title = `Booking On Hold: ${booking.vtcName}`;\n            color = 16753920; // Orange\n            description = `The booking for **${booking.vtcName}** for slot **#${booking.slotNumber}** at event **${event.title}** has been put on hold.`;\n            break;\n        default:\n            return;\n    }\n\n\n    const embed: any = {\n        title: title,\n        description: description,\n        color: color,\n        timestamp: new Date().toISOString(),\n        footer: { text: 'Tamil Pasanga VTC | Slot Booking Update' },\n    };\n\n    if (newStatus === 'approved' && imageUrl) {\n        embed.image = { url: imageUrl };\n    }\n\n    try {\n        await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ embeds: [embed] }),\n        });\n    } catch (error) {\n        console.error('Error sending booking status webhook:', error);\n    }\n}\n\n\nexport async function updateBookingStatus(\n    eventId: string,\n    areaId: string,\n    bookingId: string,\n    newStatus: BookingStatus\n): Promise<{ success: boolean; message: string }> {\n    try {\n        const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n        const event = eventsData.events.find(e => e.id === eventId);\n        if (!event || !event.slots) return { success: false, message: 'Event not found.' };\n\n        const area = event.slots.find(a => a.id === areaId);\n        if (!area || !area.bookings) return { success: false, message: 'Slot area not found.' };\n        \n        const booking = area.bookings.find(b => b.id === bookingId);\n        if (!booking) return { success: false, message: 'Booking not found.' };\n\n        booking.status = newStatus;\n        \n        await writeJsonFile(eventsFilePath, eventsData);\n        \n        await sendBookingWebhookNotification(booking, event, newStatus, areaId);\n        \n        revalidatePath('/admin/applications');\n        revalidatePath(`/events/${eventId}`);\n        \n        return { success: true, message: `Booking status updated to ${newStatus}.` };\n\n    } catch (error) {\n        console.error('Error updating booking status:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n","size_bytes":9790},"src/app/admin/events/actions.ts":{"content":"\n'use server';\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { EventsData } from '@/lib/events';\n\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { events: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function deleteEvent(eventId: string) {\n    try {\n        const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n\n        const eventExists = eventsData.events.some(event => event.id === eventId);\n        if (!eventExists) {\n            return { success: false, message: 'Event not found.' };\n        }\n\n        eventsData.events = eventsData.events.filter(event => event.id !== eventId);\n\n        await writeJsonFile(eventsFilePath, eventsData);\n\n        revalidatePath('/admin/events');\n        revalidatePath('/events'); \n\n        return { success: true, message: 'Event deleted successfully.' };\n    } catch (error) {\n        console.error('Error deleting event:', error);\n        return { success: false, message: 'Failed to delete event.' };\n    }\n}\n","size_bytes":1517},"src/app/admin/events/delete-event-dialog.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenuItem } from '@/components/ui/dropdown-menu';\nimport { Loader2, Trash2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useRouter } from 'next/navigation';\nimport { deleteEvent } from './actions';\n\nexport function DeleteEventDialog({ eventId }: { eventId: string }) {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const handleDelete = async () => {\n    setIsDeleting(true);\n    const result = await deleteEvent(eventId);\n    setIsDeleting(false);\n\n    if (result.success) {\n      toast({\n        title: 'Success',\n        description: 'Event deleted successfully.',\n      });\n      setOpen(false);\n      router.refresh();\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.message || 'An error occurred.',\n      });\n    }\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger asChild>\n        <DropdownMenuItem\n          onSelect={(e) => e.preventDefault()}\n          className=\"text-red-500\"\n        >\n          <Trash2 className=\"mr-2 h-4 w-4\" />\n          Delete\n        </DropdownMenuItem>\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete the\n            event from your records.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleDelete}\n            disabled={isDeleting}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n          >\n            {isDeleting ? (\n              <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Deleting...</>\n            ) : (\n              'Delete'\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":2551},"src/app/admin/events/page.tsx":{"content":"\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { PlusCircle, MoreHorizontal, FilePenLine } from \"lucide-react\";\nimport eventsData from \"@/lib/events.json\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport Link from \"next/link\";\nimport { Footer } from \"@/components/app/footer\";\nimport { DeleteEventDialog } from \"./delete-event-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst events = eventsData.events;\n\nexport default function EventsAdminPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <main className=\"flex-grow p-4 md:p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h1 className=\"text-3xl font-headline\">Manage Events</h1>\n            <Button asChild>\n              <Link href=\"/admin/events/create\">\n                <PlusCircle className=\"mr-2 h-4 w-4\" />\n                Create New\n              </Link>\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>All Events</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Title</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {events.map((event) => (\n                    <TableRow key={event.id}>\n                      <TableCell className=\"font-medium\">{event.title}</TableCell>\n                      <TableCell>{event.date}</TableCell>\n                      <TableCell>\n                        <Badge variant={event.type === 'internal' ? 'default' : 'secondary'} className=\"capitalize\">\n                            {event.type}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <span className=\"sr-only\">Open menu</span>\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem asChild>\n                              <Link href={`/admin/events/edit/${event.id}`}>\n                                <FilePenLine className=\"mr-2 h-4 w-4\" />\n                                Edit\n                              </Link>\n                            </DropdownMenuItem>\n                            <DeleteEventDialog eventId={event.id} />\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <div className=\"mt-8 text-center\">\n            <Button variant=\"outline\" asChild>\n                <Link href=\"/admin\">Back to Admin</Link>\n            </Button>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3725},"src/app/admin/gallery/actions.ts":{"content":"\n'use server';\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { GalleryData } from '@/lib/gallery-images';\n\nconst galleryFilePath = path.join(process.cwd(), 'src', 'lib', 'gallery-images.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { galleryImages: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function deleteGalleryImage(imageId: string) {\n    try {\n        const galleryData = await readJsonFile<GalleryData>(galleryFilePath);\n\n        const imageExists = galleryData.galleryImages.some(image => image.id === imageId);\n        if (!imageExists) {\n            return { success: false, message: 'Image not found.' };\n        }\n\n        galleryData.galleryImages = galleryData.galleryImages.filter(image => image.id !== imageId);\n\n        await writeJsonFile(galleryFilePath, galleryData);\n\n        revalidatePath('/admin/gallery');\n        revalidatePath('/gallery'); \n\n        return { success: true, message: 'Image deleted successfully.' };\n    } catch (error) {\n        console.error('Error deleting gallery image:', error);\n        return { success: false, message: 'Failed to delete image.' };\n    }\n}\n","size_bytes":1588},"src/app/admin/gallery/delete-image-dialog.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenuItem } from '@/components/ui/dropdown-menu';\nimport { Loader2, Trash2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useRouter } from 'next/navigation';\nimport { deleteGalleryImage } from './actions';\n\nexport function DeleteImageDialog({ imageId }: { imageId: string }) {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const handleDelete = async () => {\n    setIsDeleting(true);\n    const result = await deleteGalleryImage(imageId);\n    setIsDeleting(false);\n\n    if (result.success) {\n      toast({\n        title: 'Success',\n        description: 'Image deleted successfully.',\n      });\n      setOpen(false);\n      router.refresh();\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.message || 'An error occurred.',\n      });\n    }\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger asChild>\n        <DropdownMenuItem\n          onSelect={(e) => e.preventDefault()}\n          className=\"text-red-500\"\n        >\n          <Trash2 className=\"mr-2 h-4 w-4\" />\n          Delete\n        </DropdownMenuItem>\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete the\n            gallery image from your records.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleDelete}\n            disabled={isDeleting}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n          >\n            {isDeleting ? (\n              <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Deleting...</>\n            ) : (\n              'Delete'\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":2573},"src/app/admin/gallery/page.tsx":{"content":"\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { PlusCircle, MoreHorizontal, FilePenLine } from \"lucide-react\";\nimport galleryData from \"@/lib/gallery-images.json\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport Link from \"next/link\";\nimport { Footer } from \"@/components/app/footer\";\nimport Image from \"next/image\";\nimport { DeleteImageDialog } from \"./delete-image-dialog\";\n\nconst images = galleryData.galleryImages;\n\nexport default function GalleryAdminPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <main className=\"flex-grow p-4 md:p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h1 className=\"text-3xl font-headline\">Manage Gallery Images</h1>\n            <Button asChild>\n              <Link href=\"/admin/gallery/create\">\n                <PlusCircle className=\"mr-2 h-4 w-4\" />\n                Create New\n              </Link>\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>All Images</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Image</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {images.map((image) => (\n                    <TableRow key={image.id}>\n                      <TableCell>\n                        <Image \n                            src={image.imageUrl}\n                            alt={image.id}\n                            width={100}\n                            height={60}\n                            className=\"rounded-md object-cover\"\n                        />\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <span className=\"sr-only\">Open menu</span>\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem asChild>\n                              <Link href={`/admin/gallery/edit/${image.id}`}>\n                                <FilePenLine className=\"mr-2 h-4 w-4\" />\n                                Edit\n                              </Link>\n                            </DropdownMenuItem>\n                            <DeleteImageDialog imageId={image.id} />\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <div className=\"mt-8 text-center\">\n            <Button variant=\"outline\" asChild>\n                <Link href=\"/admin\">Back to Admin</Link>\n            </Button>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3605},"src/app/admin/news/actions.ts":{"content":"'use server';\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { NewsData } from '@/lib/news-articles';\nimport type { ImagePlaceholder } from '@/lib/placeholder-images';\n\nconst newsFilePath = path.join(process.cwd(), 'src', 'lib', 'news-articles.json');\nconst imagesFilePath = path.join(process.cwd(), 'src', 'lib', 'placeholder-images.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            // If the file doesn't exist, return a default structure\n            if (filePath.includes('news-articles')) return { newsletters: [] } as any;\n            if (filePath.includes('placeholder-images')) return { placeholderImages: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function deleteNewsArticle(articleId: string) {\n    try {\n        const newsData = await readJsonFile<NewsData>(newsFilePath);\n        const imagesData = await readJsonFile<{ placeholderImages: ImagePlaceholder[] }>(imagesFilePath);\n\n        const articleToDelete = newsData.newsletters.find(article => article.id === articleId);\n        if (!articleToDelete) {\n            return { success: false, message: 'Article not found.' };\n        }\n\n        // Filter out the article and its corresponding image\n        newsData.newsletters = newsData.newsletters.filter(article => article.id !== articleId);\n        imagesData.placeholderImages = imagesData.placeholderImages.filter(image => image.id !== articleToDelete.imageId);\n\n        await writeJsonFile(newsFilePath, newsData);\n        await writeJsonFile(imagesFilePath, imagesData);\n\n        revalidatePath('/admin/news');\n        revalidatePath('/');\n        revalidatePath('/news');\n\n        return { success: true, message: 'Article deleted successfully.' };\n    } catch (error) {\n        console.error('Error deleting news article:', error);\n        return { success: false, message: 'Failed to delete article.' };\n    }\n}\n","size_bytes":2306},"src/app/admin/news/delete-article-dialog.tsx":{"content":"'use client';\n\nimport { useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenuItem } from '@/components/ui/dropdown-menu';\nimport { Loader2, Trash2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useRouter } from 'next/navigation';\nimport { deleteNewsArticle } from './actions';\n\nexport function DeleteArticleDialog({ articleId }: { articleId: string }) {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const handleDelete = async () => {\n    setIsDeleting(true);\n    const result = await deleteNewsArticle(articleId);\n    setIsDeleting(false);\n\n    if (result.success) {\n      toast({\n        title: 'Success',\n        description: 'Article deleted successfully.',\n      });\n      setOpen(false);\n      router.refresh();\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.message || 'An error occurred.',\n      });\n    }\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger asChild>\n        <DropdownMenuItem\n          onSelect={(e) => e.preventDefault()}\n          className=\"text-red-500\"\n        >\n          <Trash2 className=\"mr-2 h-4 w-4\" />\n          Delete\n        </DropdownMenuItem>\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete the\n            news article and remove its data from our servers.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleDelete}\n            disabled={isDeleting}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n          >\n            {isDeleting ? (\n              <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Deleting...</>\n            ) : (\n              'Delete'\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":2598},"src/app/admin/news/page.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { PlusCircle, MoreHorizontal, FilePenLine } from \"lucide-react\";\nimport newsData from \"@/lib/news-articles.json\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport Link from \"next/link\";\nimport { Footer } from \"@/components/app/footer\";\nimport { DeleteArticleDialog } from \"./delete-article-dialog\";\n\nconst articles = newsData.newsletters;\n\nexport default function NewsAdminPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <main className=\"flex-grow p-4 md:p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h1 className=\"text-3xl font-headline\">Manage News Articles</h1>\n            <Button asChild>\n              <Link href=\"/admin/news/create\">\n                <PlusCircle className=\"mr-2 h-4 w-4\" />\n                Create New\n              </Link>\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>All Articles</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Title</TableHead>\n                    <TableHead>Author</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {articles.map((article) => (\n                    <TableRow key={article.id}>\n                      <TableCell className=\"font-medium\">{article.title}</TableCell>\n                      <TableCell>{article.author}</TableCell>\n                      <TableCell>{article.date}</TableCell>\n                      <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <span className=\"sr-only\">Open menu</span>\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem asChild>\n                              <Link href={`/admin/news/edit/${article.id}`}>\n                                <FilePenLine className=\"mr-2 h-4 w-4\" />\n                                Edit\n                              </Link>\n                            </DropdownMenuItem>\n                            <DeleteArticleDialog articleId={article.id} />\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <div className=\"mt-8 text-center\">\n            <Button variant=\"outline\" asChild>\n                <Link href=\"/admin\">Back to Admin</Link>\n            </Button>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3516},"src/app/admin/staff/actions.ts":{"content":"\n'use server';\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { StaffData } from '@/lib/staff-members';\n\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { staffMembers: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function deleteStaffMember(memberId: string) {\n    try {\n        const staffData = await readJsonFile<StaffData>(staffFilePath);\n\n        const memberExists = staffData.staffMembers.some(member => member.id === memberId);\n        if (!memberExists) {\n            return { success: false, message: 'Staff member not found.' };\n        }\n\n        staffData.staffMembers = staffData.staffMembers.filter(member => member.id !== memberId);\n\n        await writeJsonFile(staffFilePath, staffData);\n\n        revalidatePath('/admin/staff');\n        revalidatePath('/staff'); \n\n        return { success: true, message: 'Staff member deleted successfully.' };\n    } catch (error) {\n        console.error('Error deleting staff member:', error);\n        return { success: false, message: 'Failed to delete staff member.' };\n    }\n}\n","size_bytes":1586},"src/app/admin/staff/delete-staff-dialog.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenuItem } from '@/components/ui/dropdown-menu';\nimport { Loader2, Trash2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useRouter } from 'next/navigation';\nimport { deleteStaffMember } from './actions';\n\nexport function DeleteStaffDialog({ memberId }: { memberId: string }) {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const handleDelete = async () => {\n    setIsDeleting(true);\n    const result = await deleteStaffMember(memberId);\n    setIsDeleting(false);\n\n    if (result.success) {\n      toast({\n        title: 'Success',\n        description: 'Staff member deleted successfully.',\n      });\n      setOpen(false);\n      router.refresh();\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.message || 'An error occurred.',\n      });\n    }\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={setOpen}>\n      <AlertDialogTrigger asChild>\n        <DropdownMenuItem\n          onSelect={(e) => e.preventDefault()}\n          className=\"text-red-500\"\n        >\n          <Trash2 className=\"mr-2 h-4 w-4\" />\n          Delete\n        </DropdownMenuItem>\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete the\n            staff member from your records.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleDelete}\n            disabled={isDeleting}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n          >\n            {isDeleting ? (\n              <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Deleting...</>\n            ) : (\n              'Delete'\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":2580},"src/app/admin/staff/page.tsx":{"content":"\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { PlusCircle, MoreHorizontal, FilePenLine } from \"lucide-react\";\nimport staffData from \"@/lib/staff-members.json\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport Link from \"next/link\";\nimport { Footer } from \"@/components/app/footer\";\nimport { DeleteStaffDialog } from \"./delete-staff-dialog\";\n\nconst staff = staffData.staffMembers;\n\nexport default function StaffAdminPage() {\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <main className=\"flex-grow p-4 md:p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h1 className=\"text-3xl font-headline\">Manage Staff Members</h1>\n            <Button asChild>\n              <Link href=\"/admin/staff/create\">\n                <PlusCircle className=\"mr-2 h-4 w-4\" />\n                Create New\n              </Link>\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>All Staff</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {staff.map((member) => (\n                    <TableRow key={member.id}>\n                      <TableCell className=\"font-medium\">{member.name}</TableCell>\n                      <TableCell>{member.role}</TableCell>\n                      <TableCell className=\"text-right\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <span className=\"sr-only\">Open menu</span>\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem asChild>\n                              <Link href={`/admin/staff/edit/${member.id}`}>\n                                <FilePenLine className=\"mr-2 h-4 w-4\" />\n                                Edit\n                              </Link>\n                            </DropdownMenuItem>\n                            <DeleteStaffDialog memberId={member.id} />\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <div className=\"mt-8 text-center\">\n            <Button variant=\"outline\" asChild>\n                <Link href=\"/admin\">Back to Admin</Link>\n            </Button>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3387},"src/app/api/discord-interactions/route.ts":{"content":"\n'use server';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport {\n  InteractionType,\n  InteractionResponseType,\n  MessageFlags,\n  ButtonStyle,\n  APIInteraction,\n  APIInteractionResponse,\n  APIEmbed,\n  APIApplicationCommandInteraction,\n  APIMessageComponentInteraction,\n} from 'discord-api-types/v10';\nimport { verify } from 'tweetnacl';\nimport type { ApplicationStatus, ApplicationsData } from '@/lib/applications';\nimport type { StaffData, StaffMember } from '@/lib/staff-members';\nimport { revalidatePath } from 'next/cache';\n\nconst STAFF_ROLE_ID = '1419223859483115591';\nconst applicationsFilePath = path.join(process.cwd(), 'src', 'lib', 'applications.json');\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\n\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            if (filePath.includes('applications')) return { applications: [] } as any;\n            if (filePath.includes('staff-members')) return { staffMembers: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nasync function updateApplicationAndStaff(\n  applicationId: string,\n  newStatus: ApplicationStatus,\n  role: string = 'Trainee'\n) {\n  try {\n    const applicationsData = await readJsonFile<ApplicationsData>(applicationsFilePath);\n    const staffData = await readJsonFile<StaffData>(staffFilePath);\n    \n    const appIndex = applicationsData.applications.findIndex(app => app.id === applicationId);\n\n    if (appIndex === -1) {\n      console.error(`Application with ID ${applicationId} not found.`);\n      return;\n    }\n\n    const application = applicationsData.applications[appIndex];\n    const oldStatus = application.status;\n\n    // Update status\n    application.status = newStatus;\n\n    // If accepting, check if they are already a staff member to avoid duplicates\n    if (newStatus === 'Accepted' && oldStatus !== 'Accepted') {\n      const isAlreadyStaff = staffData.staffMembers.some(member => member.name === application.name);\n      \n      if (!isAlreadyStaff) {\n        const newMember: StaffMember = {\n            id: `staff-${Date.now()}`,\n            name: application.name,\n            role: role,\n            imageId: 'testimonial-avatar',\n            imageUrl: \"https://media.discordapp.net/attachments/1116720480544636999/1274425873201631304/TP_NEW_WB_PNGxxxhdpi.png?ex=68d4d8d5&is=68d38755&hm=b6d4e0e4ef2c3215a4de4fb2f592189a60ddd94c651f96fe04deac2e7f96ddc6&=&format=webp&quality=lossless&width=826&height=826\",\n            steamUrl: application.steamUrl,\n            truckersmpUrl: \"\",\n        };\n        staffData.staffMembers.push(newMember);\n        await writeJsonFile(staffFilePath, staffData);\n      }\n    }\n\n    await writeJsonFile(applicationsFilePath, applicationsData);\n    \n    // Revalidate paths\n    revalidatePath('/admin/applications');\n    revalidatePath('/application-status');\n    revalidatePath('/staff');\n\n  } catch (error) {\n    console.error(`Error processing application ${applicationId}:`, error);\n  }\n}\n\nfunction respond(response: APIInteractionResponse) {\n  return new NextResponse(JSON.stringify(response), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n}\n\nfunction respondEphimerally(content: string) {\n    return respond({\n        type: InteractionResponseType.ChannelMessageWithSource,\n        data: {\n            content,\n            flags: MessageFlags.Ephemeral,\n        },\n    });\n}\n\nasync function sendFollowupMessage(interactionToken: string, content: string) {\n  const fetch = (await import('node-fetch')).default;\n  const url = `https://discord.com/api/v10/webhooks/${process.env.DISCORD_APPLICATION_ID}/${interactionToken}`;\n  \n  await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ content }),\n  });\n}\n\nexport async function POST(req: NextRequest) {\n  const signature = req.headers.get('x-signature-ed25519');\n  const timestamp = req.headers.get('x-signature-timestamp');\n  const rawBody = await req.text();\n\n  if (!signature || !timestamp) {\n    return new NextResponse('Missing signature headers', { status: 401 });\n  }\n\n  const publicKey = process.env.DISCORD_PUBLIC_KEY;\n  if (!publicKey) {\n    console.error('DISCORD_PUBLIC_KEY is not set');\n    return new NextResponse('Server configuration error', { status: 500 });\n  }\n\n  const isVerified = verify(\n    Buffer.from(timestamp + rawBody),\n    Buffer.from(signature, 'hex'),\n    Buffer.from(publicKey, 'hex')\n  );\n\n  if (!isVerified) {\n    return new NextResponse('Invalid signature', { status: 401 });\n  }\n\n  const interaction = JSON.parse(rawBody) as APIInteraction;\n\n  if (interaction.type === InteractionType.Ping) {\n    return respond({ type: InteractionResponseType.Pong });\n  }\n\n  if (interaction.type === InteractionType.ApplicationCommand) {\n    const command = interaction as APIApplicationCommandInteraction;\n    const memberRoles = command.member?.roles as string[] | undefined;\n\n    // Role check for all application commands\n    if (!memberRoles || !memberRoles.includes(STAFF_ROLE_ID)) {\n        return respondEphimerally('You do not have permission to use this command.');\n    }\n    \n    const staffMember = command.member?.user;\n\n    if (!staffMember) {\n      return respondEphimerally(\"Could not identify the user running the command.\");\n    }\n\n    if (command.data.name === 'hello') {\n      return respond({\n        type: InteractionResponseType.ChannelMessageWithSource,\n        data: {\n          content: 'Hello! I am the Tamil Pasanga VTC bot, here to help.',\n        },\n      });\n    }\n\n    if (command.data.name === 'accept' || command.data.name === 'reject') {\n      const applicationId = (command.data.options?.[0] as any)?.value;\n      if (!applicationId) {\n        return respondEphimerally('You must provide an Application ID.');\n      }\n      \n      const action = command.data.name;\n      let followupMessage = '';\n      let newStatus: ApplicationStatus = 'Pending';\n\n      if (action === 'accept') {\n        newStatus = 'Accepted';\n        followupMessage = `✅ **Application Accepted** | \\`${applicationId}\\` has been manually accepted by <@${staffMember.id}>.`;\n      } else {\n        newStatus = 'Rejected';\n        followupMessage = `❌ **Application Rejected** | \\`${applicationId}\\` has been manually rejected by <@${staffMember.id}>.`;\n      }\n      \n      // Update the application status in the background\n      updateApplicationAndStaff(applicationId, newStatus).catch(console.error);\n\n      // Acknowledge the command immediately\n      return respond({\n          type: InteractionResponseType.ChannelMessageWithSource,\n          data: {\n              content: followupMessage,\n          },\n      });\n    }\n  }\n\n  if (interaction.type === InteractionType.MessageComponent) {\n    const componentInteraction = interaction as APIMessageComponentInteraction;\n    const memberRoles = componentInteraction.member?.roles as string[] | undefined;\n    \n    // Role check for all message components\n    if (!memberRoles || !memberRoles.includes(STAFF_ROLE_ID)) {\n        return respondEphimerally('You do not have permission to use this button.');\n    }\n\n    if (!interaction.member) {\n        return respondEphimerally(\"Could not identify the user clicking the button.\");\n    }\n    \n    const customId = interaction.data.custom_id;\n    const [action, applicationId] = customId.split('_');\n    const staffMember = interaction.member.user;\n\n    const originalMessage = interaction.message;\n    const originalEmbed = originalMessage.embeds[0];\n\n    let statusText = '';\n    let color = originalEmbed.color;\n    let followupMessage = '';\n    let newStatus: ApplicationStatus = 'Pending';\n\n    switch (action) {\n      case 'accept':\n        statusText = `Accepted by ${staffMember.username}`;\n        color = 5763719; // Green\n        followupMessage = `✅ **Application Accepted** | \\`${applicationId}\\` has been accepted by <@${staffMember.id}>.`;\n        newStatus = 'Accepted';\n        break;\n      case 'reject':\n        statusText = `Rejected by ${staffMember.username}`;\n        color = 15548997; // Red\n        followupMessage = `❌ **Application Rejected** | \\`${applicationId}\\` has been rejected by <@${staffMember.id}>.`;\n        newStatus = 'Rejected';\n        break;\n      case 'interview':\n        statusText = `Interview scheduled by ${staffMember.username}`;\n        color = 3447003; // Blue\n        followupMessage = `💬 **Interview Stage** | \\`${applicationId}\\` has been moved to the interview stage by <@${staffMember.id}>.`;\n        newStatus = 'Interview';\n        break;\n      default:\n        return respondEphimerally('Unknown action.');\n    }\n    \n    // We must acknowledge the interaction first by updating the message.\n    // A follow-up response can be sent after.\n    const updatedEmbed: APIEmbed = {\n        ...originalEmbed,\n        color,\n        fields: [\n            ...(originalEmbed.fields || []),\n            { name: 'Status', value: statusText, inline: false }\n        ]\n    };\n\n    // Use a Promise to send the followup and update data after responding to the interaction\n    if (followupMessage) {\n      // We don't await these, because we need to send the initial response quickly.\n      sendFollowupMessage(interaction.token, followupMessage).catch(console.error);\n      updateApplicationAndStaff(applicationId, newStatus).catch(console.error);\n    }\n\n    // Respond to the initial interaction to update the message\n    return respond({\n        type: InteractionResponseType.UpdateMessage,\n        data: {\n            embeds: [updatedEmbed],\n            // Disable buttons after action\n            components: [\n              {\n                type: 1, // Action Row\n                components: [\n                  { type: 2, style: ButtonStyle.Success, label: 'Accept', custom_id: 'accept_disabled', disabled: true },\n                  { type: 2, style: ButtonStyle.Danger, label: 'Reject', custom_id: 'reject_disabled', disabled: true },\n                  { type: 2, style: ButtonStyle.Primary, label: 'Accept for Interview', custom_id: 'interview_disabled', disabled: true },\n                ]\n              }\n            ]\n        },\n    });\n  }\n\n  return respondEphimerally('Interaction type not supported.');\n}\n","size_bytes":10627},"src/app/events/[id]/actions.ts":{"content":"\n'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { EventsData, Booking } from '@/lib/events';\n\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\n\nconst bookingFormSchema = z.object({\n  discordId: z.string().min(1, 'Discord ID is required'),\n  vtcName: z.string().min(1, 'VTC Name is required'),\n  position: z.string().min(1, 'Position is required'),\n  estimatedDrivers: z.coerce.number().min(1, 'Estimated drivers must be at least 1'),\n  truckersmpUrl: z.string().url('A valid TruckersMP URL is required'),\n  slotNumber: z.coerce.number().min(1, 'Please select a slot'),\n  eventId: z.string(),\n  areaId: z.string(),\n});\n\ntype BookingFormValues = z.infer<typeof bookingFormSchema>;\n\nasync function readEvents(): Promise<EventsData> {\n    try {\n        const data = await fs.readFile(eventsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { events: [] };\n        }\n        throw error;\n    }\n}\n\nasync function writeEvents(data: EventsData): Promise<void> {\n    await fs.writeFile(eventsFilePath, JSON.stringify(data, null, 2));\n}\n\nasync function sendBookingWebhook(data: BookingFormValues, eventTitle: string) {\n    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;\n    if (!webhookUrl) {\n        console.error('DISCORD_WEBHOOK_URL is not set.');\n        return;\n    }\n\n    const embed = {\n        title: 'New Slot Booking Request',\n        color: 16776960, // Yellow\n        fields: [\n            { name: 'Event', value: eventTitle, inline: false },\n            { name: 'VTC Name', value: data.vtcName, inline: true },\n            { name: 'Slot Requested', value: `#${data.slotNumber}`, inline: true },\n            { name: 'Estimated Drivers', value: String(data.estimatedDrivers), inline: true },\n            { name: 'Discord ID', value: data.discordId, inline: false },\n            { name: 'Position', value: data.position, inline: true },\n            { name: 'TruckersMP URL', value: data.truckersmpUrl, inline: false },\n        ],\n        timestamp: new Date().toISOString(),\n        footer: {\n            text: 'Tamil Pasanga VTC | Slot Booking',\n        },\n    };\n\n    const payload = {\n        content: `New booking request from **${data.vtcName}** for event: **${eventTitle}**.`,\n        embeds: [embed],\n    };\n\n     try {\n        const response = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(payload),\n        });\n        if (!response.ok) {\n             console.error(`Discord webhook failed for booking with status: ${response.status}`);\n        }\n    } catch (error) {\n        console.error('Error sending Discord webhook for booking:', error);\n    }\n}\n\n\nexport async function submitBooking(values: BookingFormValues) {\n    const validation = bookingFormSchema.safeParse(values);\n    if (!validation.success) {\n        return { success: false, message: 'Invalid data provided.' };\n    }\n\n    const { eventId, areaId, slotNumber, vtcName } = validation.data;\n\n    try {\n        const eventsData = await readEvents();\n        const eventIndex = eventsData.events.findIndex(e => e.id === eventId);\n\n        if (eventIndex === -1) {\n            return { success: false, message: 'Event not found.' };\n        }\n\n        const event = eventsData.events[eventIndex];\n        const areaIndex = event.slots?.findIndex(a => a.id === areaId);\n\n        if (areaIndex === undefined || areaIndex === -1 || !event.slots) {\n            return { success: false, message: 'Slot area not found.' };\n        }\n        \n        const area = event.slots[areaIndex];\n\n        // Check if slot is already booked\n        const isSlotBooked = area.bookings.some(b => b.slotNumber === slotNumber && b.status === 'approved');\n        if (isSlotBooked) {\n             return { success: false, message: `Slot #${slotNumber} is already booked.` };\n        }\n        \n        // Check if VTC has already booked a slot in this area\n        const hasVTCBooked = area.bookings.some(b => b.vtcName.toLowerCase() === vtcName.toLowerCase());\n        if(hasVTCBooked) {\n            return { success: false, message: `Your VTC (${vtcName}) has already requested a slot in this area.` };\n        }\n\n        const newBooking: Booking = {\n            id: `booking-${Date.now()}`,\n            slotNumber: slotNumber,\n            vtcName: vtcName,\n            status: 'pending',\n        };\n\n        event.slots[areaIndex].bookings.push(newBooking);\n\n        await writeEvents(eventsData);\n        \n        // Send webhook notification\n        await sendBookingWebhook(validation.data, event.title);\n        \n        revalidatePath(`/events/${eventId}`);\n\n        return { success: true, message: 'Your slot request has been submitted for review.' };\n\n    } catch (error) {\n        console.error('Error submitting booking:', error);\n        return { success: false, message: 'An unexpected error occurred.' };\n    }\n}\n","size_bytes":5133},"src/app/events/[id]/event-detail-client.tsx":{"content":"\n'use client';\n\nimport { useState } from 'react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport {\n    Clock,\n    MapPin,\n    Users,\n    ChevronRight,\n    Calendar,\n    Globe,\n    Map,\n    X,\n} from 'lucide-react';\nimport type { Event } from '@/lib/events';\nimport type { ImagePlaceholder } from '@/lib/placeholder-images';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\nimport { EventBookingDialog } from '@/components/app/event-booking-dialog';\nimport { Button } from '@/components/ui/button';\n\n\ntype EventWithImage = Event & { image: ImagePlaceholder | undefined };\n\nexport function EventDetailClient({ event }: { event: EventWithImage }) {\n    const [lightboxImage, setLightboxImage] = useState<string | null>(null);\n\n    const { image } = event;\n    \n    const confirmedAttendees = event.slots?.reduce((total, area) => {\n        return total + (area.bookings?.filter(b => b.status === 'approved').length || 0);\n    }, 0) || 0;\n\n    const participatingVtcs = event.slots?.reduce((total, area) => {\n        const approvedVtcs = area.bookings?.filter(b => b.status === 'approved').length || 0;\n        return total + approvedVtcs;\n    }, 0) || 0;\n    \n    const totalFreeSlots = event.slots?.reduce((total, area) => {\n        const totalInArea = (area.endSlot - area.startSlot + 1);\n        const bookedInArea = area.bookings?.filter(b => b.status === 'approved' || b.status === 'hold').length || 0;\n        return total + (totalInArea - bookedInArea);\n    }, 0) || 0;\n\n    return (\n        <main className=\"flex-grow\">\n            {/* Banner Section */}\n            <div className=\"relative h-[40vh] w-full text-white\">\n                {image && (\n                    <Image\n                        src={image.imageUrl}\n                        alt={image.description}\n                        fill\n                        className=\"object-cover\"\n                        data-ai-hint={image.imageHint}\n                    />\n                )}\n                <div className=\"absolute inset-0 bg-black/60\" />\n                <div className=\"absolute bottom-0 left-0 container mx-auto px-4 py-8\">\n                    <h1 className=\"text-5xl font-headline font-bold mb-4\">{event.title}</h1>\n                    <div className=\"flex items-center gap-4 text-lg\">\n                        <span className=\"flex items-center gap-2 bg-red-500/80 text-white px-4 py-2 rounded-full text-xl font-bold transition-transform duration-300 hover:scale-110\"> <Clock size={20}/> UPCOMING</span>\n                        <span className=\"flex items-center gap-2 bg-green-500/80 text-white px-4 py-2 rounded-full text-xl font-bold transition-transform duration-300 hover:scale-110\"><Users size={20}/> {confirmedAttendees} attending</span>\n                        <span className=\"flex items-center gap-1 text-2xl\"><MapPin size={24}/> {event.departure} <ChevronRight size={24} /> {event.arrival}</span>\n                    </div>\n                </div>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"container mx-auto px-4 py-12\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                    {/* Left Column */}\n                    <div className=\"lg:col-span-2 space-y-8\">\n                         <Card className=\"animated-border bg-transparent p-[2px]\">\n                            <div className=\"bg-card rounded-lg h-full\">\n                                <CardHeader>\n                                    <CardTitle className=\"flex items-center gap-2\"><Calendar size={20}/> Event Schedule</CardTitle>\n                                </CardHeader>\n                                <CardContent className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                        <p className=\"font-semibold\">Meetup Time</p>\n                                        <p className=\"text-muted-foreground\">{event.meetupTime}</p>\n                                    </div>\n                                    <div>\n                                        <p className=\"font-semibold\">Departure Time</p>\n                                        <p className=\"text-muted-foreground\">{event.departureTime}</p>\n                                    </div>\n                                </CardContent>\n                            </div>\n                        </Card>\n\n                        <Card className=\"animated-border bg-transparent p-[2px]\">\n                            <div className=\"bg-card rounded-lg h-full\">\n                                <CardHeader>\n                                    <CardTitle className=\"flex items-center gap-2\"><MapPin size={20}/> Route Details</CardTitle>\n                                </CardHeader>\n                                <CardContent className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                        <p className=\"font-semibold\">Departure</p>\n                                        <p className=\"text-muted-foreground\">{event.departure}</p>\n                                    </div>\n                                    <div>\n                                        <p className=\"font-semibold\">Arrival</p>\n                                        <p className=\"text-muted-foreground\">{event.arrival}</p>\n                                    </div>\n                                     <div className=\"col-span-2\">\n                                        <p className=\"font-semibold\">Server</p>\n                                        <p className=\"text-muted-foreground\">{event.server}</p>\n                                    </div>\n                                </CardContent>\n                            </div>\n                        </Card>\n                        \n                        <Accordion type=\"single\" collapsible className=\"w-full\">\n                            <AccordionItem value=\"description\">\n                                <AccordionTrigger>Event Description</AccordionTrigger>\n                                <AccordionContent>\n                                    {event.description}\n                                </AccordionContent>\n                            </AccordionItem>\n                            <AccordionItem value=\"rules\">\n                                <AccordionTrigger>Event Rules</AccordionTrigger>\n                                <AccordionContent>\n                                   {event.rules}\n                                </AccordionContent>\n                            </AccordionItem>\n                        </Accordion>\n                    </div>\n\n                    {/* Right Column (Sidebar) */}\n                    <div className=\"space-y-8\">\n                         <Card>\n                            <CardHeader>\n                                <CardTitle>Quick Actions</CardTitle>\n                            </CardHeader>\n                            <CardContent className=\"space-y-2\">\n                                <Button asChild className=\"w-full\" variant=\"outline\"><Link href={event.url} target=\"_blank\"><Globe/> Visit Event Website</Link></Button>\n                                {event.routeMapUrl && (\n                                    <Button asChild className=\"w-full\" variant=\"outline\"><Link href={event.routeMapUrl} target=\"_blank\"><Map/> View Route Map</Link></Button>\n                                )}\n                            </CardContent>\n                        </Card>\n\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>Event Statistics</CardTitle>\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"flex justify-between items-center\">\n                                    <p>Confirmed Attendees</p>\n                                    <p className=\"font-bold\">{confirmedAttendees}</p>\n                                </div>\n                                <div className=\"flex justify-between items-center mt-2\">\n                                    <p>VTCs Participating</p>\n                                    <p className=\"font-bold\">{participatingVtcs}</p>\n                                </div>\n                            </CardContent>\n                        </Card>\n                    </div>\n                </div>\n\n                {event.slots && event.slots.length > 0 && (\n                    <section id=\"event-slots\" className=\"mt-16\">\n                        <div className=\"flex justify-between items-center mb-4\">\n                            <h2 className=\"text-3xl font-headline text-primary\">Event Slots</h2>\n                            <p className=\"text-muted-foreground font-bold\">{totalFreeSlots} free slots available</p>\n                        </div>\n                        <p className=\"text-center text-muted-foreground mb-8\">Come back after sometime to check your slot&apos;s booking status!</p>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                            {event.slots.map(area => {\n                                const totalSlots = area.endSlot - area.startSlot + 1;\n                                const bookedOrHeldSlots = area.bookings?.filter(b => b.status === 'approved' || b.status === 'hold') || [];\n                                const availableSlotsCount = totalSlots - bookedOrHeldSlots.length;\n                                \n                                const allSlotNumbers = Array.from({ length: totalSlots }, (_, i) => area.startSlot + i);\n                                const bookedSlotNumbers = new Set(bookedOrHeldSlots.map(b => b.slotNumber));\n                                const availableSlots = allSlotNumbers.filter(num => !bookedSlotNumbers.has(num));\n\n                                return (\n                                    <Card key={area.id} className=\"animated-border bg-transparent p-[2px] shadow-lg flex flex-col\">\n                                        <div className=\"bg-card rounded-lg h-full flex flex-col\">\n                                            <CardHeader className=\"p-0\">\n                                                <div className=\"relative aspect-video cursor-pointer\" onClick={() => setLightboxImage(area.imageUrl)}>\n                                                    <Image\n                                                        src={area.imageUrl}\n                                                        alt={area.areaName}\n                                                        fill\n                                                        className=\"object-cover rounded-t-lg\"\n                                                    />\n                                                </div>\n                                            </CardHeader>\n                                            <CardContent className=\"p-4 flex-grow flex flex-col\">\n                                                <p className=\"text-center text-sm text-primary mb-2\">Click on the image to view</p>\n                                                <div className=\"flex justify-center gap-2 mb-4\">\n                                                    <Badge variant={availableSlotsCount > 0 ? 'default' : 'destructive'} className={cn('text-lg', availableSlotsCount > 0 && 'bg-green-500')}>\n                                                        {availableSlotsCount} slots available\n                                                    </Badge>\n                                                    <Badge variant=\"secondary\" className=\"text-lg\">{totalSlots} total slots</Badge>\n                                                </div>\n\n                                                <div className=\"mb-4\">\n                                                    <p className=\"font-semibold mb-2 text-lg\">Slot Numbers:</p>\n                                                    <div className=\"flex flex-wrap gap-2\">\n                                                        {allSlotNumbers.map(num => (\n                                                            <Badge key={num} variant=\"outline\" className={cn(\"text-lg border-primary text-primary\", bookedSlotNumbers.has(num) && \"border-destructive text-destructive line-through\")}>Slot {num}</Badge>\n                                                        ))}\n                                                    </div>\n                                                </div>\n                                                \n                                                <div className=\"flex-grow mb-4\">\n                                                    <p className=\"font-semibold mb-2 text-lg\">Bookings:</p>\n                                                    <div className=\"space-y-2 text-lg\">\n                                                        {area.bookings && area.bookings.length > 0 ? area.bookings.map(booking => (\n                                                            <div key={booking.id}>\n                                                                <p className=\"font-medium text-xl\">Slot {booking.slotNumber}: {booking.vtcName}</p>\n                                                                <Badge variant=\"default\" className={cn(\"text-lg mt-1\", booking.status === 'approved' && 'bg-green-600', booking.status === 'pending' && 'bg-yellow-600', booking.status === 'rejected' && 'bg-red-600', booking.status === 'hold' && 'bg-orange-600' )}>{booking.status}</Badge>\n                                                            </div>\n                                                        )) : <p className=\"text-muted-foreground\">No bookings yet.</p>}\n                                                    </div>\n                                                </div>\n\n                                                <EventBookingDialog \n                                                    eventId={event.id} \n                                                    area={area} \n                                                    availableSlots={availableSlots}\n                                                >\n                                                    <Button className=\"w-full mt-auto\" disabled={availableSlotsCount === 0}>\n                                                        {availableSlotsCount > 0 ? 'Request Slot' : 'No Slots Available'}\n                                                    </Button>\n                                                </EventBookingDialog>\n                                            </CardContent>\n                                        </div>\n                                    </Card>\n                                );\n                            })}\n                        </div>\n                    </section>\n                )}\n            </div>\n            {lightboxImage && (\n                <div className=\"fixed inset-0 bg-black/90 z-50 flex items-center justify-center\" onClick={() => setLightboxImage(null)}>\n                    <div className=\"relative w-full h-full max-w-6xl max-h-[90%]\" onClick={(e) => e.stopPropagation()}>\n                        <Image\n                            src={lightboxImage}\n                            alt=\"Slot Map Lightbox\"\n                            fill\n                            objectFit=\"contain\"\n                            className=\"rounded-lg\"\n                        />\n                        <button onClick={() => setLightboxImage(null)} className=\"absolute top-4 right-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/80 transition-colors\">\n                            <X size={24} />\n                        </button>\n                    </div>\n                </div>\n            )}\n        </main>\n    );\n}\n","size_bytes":16007},"src/app/events/[id]/page.tsx":{"content":"\nimport { notFound } from 'next/navigation';\nimport { Header } from '@/components/app/header';\nimport { Footer } from '@/components/app/footer';\nimport eventsData from '@/lib/events.json';\nimport type { Event } from '@/lib/events';\nimport { PlaceHolderImages, type ImagePlaceholder } from '@/lib/placeholder-images';\nimport { EventDetailClient } from './event-detail-client';\n\nconst getEvent = (id: string): (Event & { image: ImagePlaceholder | undefined }) | undefined => {\n    const event = eventsData.events.find(event => event.id === id);\n    if (!event) {\n        return undefined;\n    }\n    const image = PlaceHolderImages.find(p => p.id === event.imageId);\n    return { ...event, image };\n}\n\nexport default function EventDetailPage({ params }: { params: { id: string } }) {\n    const event = getEvent(params.id);\n\n    if (!event) {\n        notFound();\n    }\n\n    return (\n        <div className=\"flex flex-col min-h-screen bg-background\">\n            <Header />\n            <EventDetailClient event={event} />\n            <Footer />\n        </div>\n    );\n}\n","size_bytes":1064},"src/app/admin/events/create/actions.ts":{"content":"\n'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { EventsData, Event, SlotArea } from '@/lib/events';\nimport type { ImagePlaceholder } from '@/lib/placeholder-images';\n\nconst bookingSchema = z.object({\n  id: z.string(),\n  slotNumber: z.coerce.number(),\n  vtcName: z.string(),\n  status: z.enum(['approved', 'pending', 'rejected', 'hold']),\n});\n\nconst slotAreaSchema = z.object({\n  id: z.string(),\n  areaName: z.string().min(1, 'Area name is required'),\n  imageUrl: z.string().url('Image URL must be a valid URL'),\n  startSlot: z.coerce.number().min(1, 'Start slot must be at least 1'),\n  endSlot: z.coerce.number().min(1, 'End slot must be at least 1'),\n  bookings: z.array(bookingSchema),\n}).refine(data => data.endSlot >= data.startSlot, {\n    message: \"End slot must be greater than or equal to start slot\",\n    path: [\"endSlot\"],\n});\n\nconst timeSchema = z.object({\n  hour: z.string().min(1, { message: 'HH' }),\n  minute: z.string().min(1, { message: 'MM' }),\n  timezone: z.string().min(1, { message: 'Zone' })\n});\n\nconst formSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  eventDate: z.date({ required_error: \"An event date is required.\" }),\n  imageUrl: z.string().url('Must be a valid URL'),\n  url: z.string().url('Must be a valid URL'),\n  routeMapUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  type: z.enum(['internal', 'partner'], {\n    errorMap: () => ({ message: 'Please select an event type' }),\n  }),\n  departure: z.string().optional(),\n  arrival: z.string().optional(),\n  server: z.string().optional(),\n  meetupTime: timeSchema,\n  departureTime: timeSchema,\n  description: z.string().optional(),\n  rules: z.string().optional(),\n  slots: z.array(slotAreaSchema).optional(),\n}).superRefine((data, ctx) => {\n    if (data.type === 'internal') {\n        if (!data.departure) ctx.addIssue({ code: 'custom', message: 'Departure is required', path: ['departure'] });\n        if (!data.arrival) ctx.addIssue({ code: 'custom', message: 'Arrival is required', path: ['arrival'] });\n        if (!data.server) ctx.addIssue({ code: 'custom', message: 'Server is required', path: ['server'] });\n        if (!data.description) ctx.addIssue({ code: 'custom', message: 'Description is required', path: ['description'] });\n        if (!data.rules) ctx.addIssue({ code: 'custom', message: 'Rules are required', path: ['rules'] });\n    }\n});\n\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\nconst imagesFilePath = path.join(process.cwd(), 'src', 'lib', 'placeholder-images.json');\n\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            if (filePath.includes('events.json')) return { events: [] } as any;\n            if (filePath.includes('placeholder-images.json')) return { placeholderImages: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\n// Helper to format date and time\nconst formatDateTime = (date: Date, time: z.infer<typeof timeSchema>): string => {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}.${month}.${year} | ${time.hour}:${time.minute} ${time.timezone}`;\n};\n\nexport async function createEvent(values: FormValues) {\n  const validation = formSchema.safeParse(values);\n  if (!validation.success) {\n    console.error(validation.error.flatten().fieldErrors);\n    return { success: false, message: 'Invalid data provided.' };\n  }\n\n  try {\n    const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n    const imagesData = await readJsonFile<{ placeholderImages: ImagePlaceholder[] }>(imagesFilePath);\n\n    const { eventDate, meetupTime, departureTime, imageUrl, ...restOfData } = validation.data;\n\n    const imageId = `event-${Date.now()}`;\n    const newImage: ImagePlaceholder = {\n        id: imageId,\n        description: `Image for ${validation.data.title}`,\n        imageUrl: imageUrl,\n        imageHint: 'custom event',\n    };\n    imagesData.placeholderImages.unshift(newImage);\n\n\n    const newEvent: Event = {\n      id: imageId,\n      imageId: imageId,\n      title: restOfData.title,\n      url: restOfData.url,\n      type: restOfData.type,\n      description: restOfData.description || '',\n      rules: restOfData.rules || '',\n      attendees: 0,\n      vtcs: 0,\n      date: formatDateTime(eventDate, meetupTime),\n      meetupTime: formatDateTime(eventDate, meetupTime),\n      departureTime: formatDateTime(eventDate, departureTime),\n      slots: restOfData.slots || [],\n      departure: restOfData.departure || '',\n      arrival: restOfData.arrival || '',\n      server: restOfData.server || '',\n      routeMapUrl: restOfData.routeMapUrl || '',\n    };\n    \n    eventsData.events.unshift(newEvent);\n\n    await writeJsonFile(eventsFilePath, eventsData);\n    await writeJsonFile(imagesFilePath, imagesData);\n    \n    revalidatePath('/admin/events');\n    revalidatePath('/events');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error creating event:', error);\n    return { success: false, message: 'Failed to write to data file.' };\n  }\n}\n","size_bytes":5616},"src/app/admin/events/create/create-event-form.tsx":{"content":"\n\"use client\";\n\nimport { useForm, useFieldArray, useWatch } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { createEvent } from \"./actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { CalendarIcon, Eye, Loader2, PlusCircle, Trash2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\n\nconst bookingSchema = z.object({\n  id: z.string(),\n  slotNumber: z.coerce.number(),\n  vtcName: z.string(),\n  status: z.enum(['approved', 'pending', 'rejected']),\n});\n\nconst slotAreaSchema = z.object({\n  id: z.string(),\n  areaName: z.string().min(1, 'Area name is required'),\n  imageUrl: z.string().url('Image URL must be a valid URL'),\n  startSlot: z.coerce.number().min(1, 'Start slot must be at least 1'),\n  endSlot: z.coerce.number().min(1, 'End slot must be at least 1'),\n  bookings: z.array(bookingSchema),\n}).refine(data => data.endSlot >= data.startSlot, {\n    message: \"End slot must be greater than or equal to start slot\",\n    path: [\"endSlot\"],\n});\n\nconst timeSchema = z.object({\n  hour: z.string().min(1, { message: 'HH' }).max(2),\n  minute: z.string().min(1, { message: 'MM' }).max(2),\n  timezone: z.string().min(1, { message: 'Zone' })\n});\n\nconst formSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  eventDate: z.date({ required_error: \"An event date is required.\" }),\n  imageUrl: z.string().url('Must be a valid URL'),\n  url: z.string().url('Must be a valid URL'),\n  routeMapUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  type: z.enum(['internal', 'partner'], {\n    errorMap: () => ({ message: 'Please select an event type' }),\n  }),\n  departure: z.string().optional(),\n  arrival: z.string().optional(),\n  server: z.string().optional(),\n  meetupTime: timeSchema,\n  departureTime: timeSchema,\n  description: z.string().optional(),\n  rules: z.string().optional(),\n  slots: z.array(slotAreaSchema).optional(),\n}).superRefine((data, ctx) => {\n    if (data.type === 'internal') {\n        if (!data.departure) ctx.addIssue({ code: 'custom', message: 'Departure is required', path: ['departure'] });\n        if (!data.arrival) ctx.addIssue({ code: 'custom', message: 'Arrival is required', path: ['arrival'] });\n        if (!data.server) ctx.addIssue({ code: 'custom', message: 'Server is required', path: ['server'] });\n        if (!data.description) ctx.addIssue({ code: 'custom', message: 'Description is required', path: ['description'] });\n        if (!data.rules) ctx.addIssue({ code: 'custom', message: 'Rules are required', path: ['rules'] });\n    }\n});\n\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function CreateEventForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title: \"\",\n      imageUrl: \"\",\n      url: \"\",\n      routeMapUrl: \"\",\n      type: \"internal\",\n      departure: \"\",\n      arrival: \"\",\n      server: \"\",\n      meetupTime: { hour: '13', minute: '00', timezone: 'UTC' },\n      departureTime: { hour: '13', minute: '30', timezone: 'UTC' },\n      description: \"\",\n      rules: \"Follow all TruckersMP rules. No reckless driving. Keep a safe distance.\",\n      slots: [],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"slots\",\n  });\n  \n  const eventType = useWatch({\n    control: form.control,\n    name: \"type\",\n  });\n  \n  const imageUrlValue = useWatch({\n    control: form.control,\n    name: \"imageUrl\",\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    const result = await createEvent(values);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully.\",\n      });\n      router.push(\"/admin/events\");\n      router.refresh(); \n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField control={form.control} name=\"type\" render={({ field }) => ( <FormItem> <FormLabel>Event Type</FormLabel> <Select onValueChange={field.onChange} defaultValue={field.value}> <FormControl><SelectTrigger><SelectValue placeholder=\"Select event type\" /></SelectTrigger></FormControl> <SelectContent> <SelectItem value=\"internal\">Internal</SelectItem> <SelectItem value=\"partner\">Partner</SelectItem> </SelectContent> </Select> <FormMessage /> </FormItem> )}/>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField control={form.control} name=\"title\" render={({ field }) => ( <FormItem> <FormLabel>Event Title</FormLabel> <FormControl><Input placeholder=\"Enter event title\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n            <FormField\n              control={form.control}\n              name=\"eventDate\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel>Event Date</FormLabel>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <FormControl>\n                        <Button\n                          variant={\"outline\"}\n                          className={cn(\n                            \"w-full pl-3 text-left font-normal\",\n                            !field.value && \"text-muted-foreground\"\n                          )}\n                        >\n                          {field.value ? (\n                            format(field.value, \"PPP\")\n                          ) : (\n                            <span>Pick a date</span>\n                          )}\n                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                        </Button>\n                      </FormControl>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={field.value}\n                        onSelect={field.onChange}\n                        disabled={(date) => date < new Date(\"1900-01-01\")}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField control={form.control} name=\"imageUrl\" render={({ field }) => ( <FormItem> <div className=\"flex justify-between items-center\"> <FormLabel>Event Image URL</FormLabel> {imageUrlValue && ( <Link href={imageUrlValue} target=\"_blank\" className=\"text-sm text-primary hover:underline flex items-center gap-1\"><Eye size={16}/>View</Link> )} </div> <FormControl><Input placeholder=\"https://example.com/image.png\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n            <FormField control={form.control} name=\"url\" render={({ field }) => ( <FormItem> <FormLabel>Event URL</FormLabel> <FormControl><Input placeholder=\"https://truckersmp.com/...\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n        </div>\n        \n        {eventType === 'internal' && (\n          <>\n            <FormField control={form.control} name=\"routeMapUrl\" render={({ field }) => ( <FormItem> <FormLabel>Route Map URL (Optional)</FormLabel> <FormControl><Input placeholder=\"https://example.com/route.png\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n             <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div/>\n                <FormField control={form.control} name=\"server\" render={({ field }) => ( <FormItem> <FormLabel>Server</FormLabel> <FormControl><Input placeholder=\"e.g., Event Server\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <FormField control={form.control} name=\"departure\" render={({ field }) => ( <FormItem> <FormLabel>Departure</FormLabel> <FormControl><Input placeholder=\"e.g., Bremen\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n                <FormField control={form.control} name=\"arrival\" render={({ field }) => ( <FormItem> <FormLabel>Arrival</FormLabel> <FormControl><Input placeholder=\"e.g., Prague\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n            </div>\n          </>\n        )}\n\n         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormItem>\n                <FormLabel>Meetup Time</FormLabel>\n                <div className=\"flex items-center gap-2\">\n                    <FormField control={form.control} name=\"meetupTime.hour\" render={({ field }) => (<FormItem><FormControl><Input placeholder=\"HH\" {...field} /></FormControl></FormItem>)}/>\n                    <span>:</span>\n                    <FormField control={form.control} name=\"meetupTime.minute\" render={({ field }) => (<FormItem><FormControl><Input placeholder=\"MM\" {...field} /></FormControl></FormItem>)}/>\n                    <FormField control={form.control} name=\"meetupTime.timezone\" render={({ field }) => (<FormItem><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger><SelectValue/></SelectTrigger></FormControl><SelectContent><SelectItem value=\"UTC\">UTC</SelectItem><SelectItem value=\"IST\">IST</SelectItem><SelectItem value=\"CET\">CET</SelectItem></SelectContent></Select></FormItem>)}/>\n                </div>\n                 <FormMessage>\n                    {form.formState.errors.meetupTime?.hour?.message || form.formState.errors.meetupTime?.minute?.message || form.formState.errors.meetupTime?.timezone?.message}\n                </FormMessage>\n            </FormItem>\n             <FormItem>\n                <FormLabel>Departure Time</FormLabel>\n                <div className=\"flex items-center gap-2\">\n                    <FormField control={form.control} name=\"departureTime.hour\" render={({ field }) => (<FormItem><FormControl><Input placeholder=\"HH\" {...field} /></FormControl></FormItem>)}/>\n                    <span>:</span>\n                    <FormField control={form.control} name=\"departureTime.minute\" render={({ field }) => (<FormItem><FormControl><Input placeholder=\"MM\" {...field} /></FormControl></FormItem>)}/>\n                    <FormField control={form.control} name=\"departureTime.timezone\" render={({ field }) => (<FormItem><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger><SelectValue/></SelectTrigger></FormControl><SelectContent><SelectItem value=\"UTC\">UTC</SelectItem><SelectItem value=\"IST\">IST</SelectItem><SelectItem value=\"CET\">CET</SelectItem></SelectContent></Select></FormItem>)}/>\n                </div>\n                 <FormMessage>\n                    {form.formState.errors.departureTime?.hour?.message || form.formState.errors.departureTime?.minute?.message || form.formState.errors.departureTime?.timezone?.message}\n                </FormMessage>\n            </FormItem>\n        </div>\n        \n        {eventType === 'internal' && (\n          <>\n            <FormField control={form.control} name=\"description\" render={({ field }) => ( <FormItem> <FormLabel>Description</FormLabel> <FormControl><Textarea placeholder=\"Enter a description for the event\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n            <FormField control={form.control} name=\"rules\" render={({ field }) => ( <FormItem> <FormLabel>Rules</FormLabel> <FormControl><Textarea placeholder=\"Enter the rules for the event\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n            \n            <Card>\n                <CardHeader>\n                    <CardTitle>Event Slots</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    {fields.map((field, index) => (\n                        <Card key={field.id} className=\"p-4 relative\">\n                            <div className=\"space-y-4\">\n                                <FormField control={form.control} name={`slots.${index}.areaName`} render={({ field }) => ( <FormItem> <FormLabel>Area Name</FormLabel> <FormControl><Input placeholder=\"e.g., Main Parking\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                    <FormField control={form.control} name={`slots.${index}.startSlot`} render={({ field }) => ( <FormItem> <FormLabel>Start Slot</FormLabel> <FormControl><Input type=\"number\" placeholder=\"e.g., 1\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n                                    <FormField control={form.control} name={`slots.${index}.endSlot`} render={({ field }) => ( <FormItem> <FormLabel>End Slot</FormLabel> <FormControl><Input type=\"number\" placeholder=\"e.g., 10\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n                                </div>\n                                <FormField control={form.control} name={`slots.${index}.imageUrl`} render={({ field }) => ( <FormItem> <FormLabel>Image URL</FormLabel> <FormControl><Input placeholder=\"https://example.com/slot-map.png\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n                            </div>\n                            <Button type=\"button\" variant=\"destructive\" size=\"icon\" className=\"absolute top-2 right-2\" onClick={() => remove(index)}>\n                                <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                        </Card>\n                    ))}\n                    <Button type=\"button\" variant=\"outline\" onClick={() => append({ id: `slot-area-${Date.now()}`, areaName: '', imageUrl: '', startSlot: 1, endSlot: 10, bookings: [] })}>\n                        <PlusCircle className=\"mr-2 h-4 w-4\" />\n                        Add Slot Area\n                    </Button>\n                </CardContent>\n            </Card>\n          </>\n        )}\n\n        <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" asChild><Link href=\"/admin/events\">Cancel</Link></Button>\n            <Button type=\"submit\" disabled={isSubmitting}>{isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Adding...</> : \"Add Event\"}</Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\n    ","size_bytes":15409},"src/app/admin/events/create/page.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CreateEventForm } from \"./create-event-form\";\nimport { Footer } from \"@/components/app/footer\";\n\nexport default function CreateEventPage() {\n    return (\n        <div className=\"flex flex-col min-h-screen bg-background\">\n            <main className=\"flex-grow flex items-center justify-center p-4\">\n                <div className=\"max-w-2xl w-full\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Add New Event</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <CreateEventForm />\n                        </CardContent>\n                    </Card>\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","size_bytes":851},"src/app/admin/gallery/create/actions.ts":{"content":"\n'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { GalleryData, GalleryImage } from '@/lib/gallery-images';\n\nconst formSchema = z.object({\n  imageUrl: z.string().url('Must be a valid URL'),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst galleryFilePath = path.join(process.cwd(), 'src', 'lib', 'gallery-images.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { galleryImages: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function createGalleryImage(values: FormValues) {\n  const validation = formSchema.safeParse(values);\n  if (!validation.success) {\n    return { success: false, message: 'Invalid data provided.' };\n  }\n\n  try {\n    const galleryData = await readJsonFile<GalleryData>(galleryFilePath);\n\n    const newImage: GalleryImage = {\n      id: `gallery-${Date.now()}`,\n      imageUrl: validation.data.imageUrl,\n    };\n    \n    galleryData.galleryImages.unshift(newImage);\n\n    await writeJsonFile(galleryFilePath, galleryData);\n    \n    revalidatePath('/admin/gallery');\n    revalidatePath('/gallery');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error creating gallery image:', error);\n    return { success: false, message: 'Failed to write to data file.' };\n  }\n}\n","size_bytes":1729},"src/app/admin/gallery/create/create-image-form.tsx":{"content":"\n\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { createGalleryImage } from \"./actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst formSchema = z.object({\n  imageUrl: z.string().url(\"Must be a valid URL\"),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function CreateImageForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      imageUrl: \"\",\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    const result = await createGalleryImage(values);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: \"Success\",\n        description: \"Gallery image added successfully.\",\n      });\n      router.push(\"/admin/gallery\");\n      router.refresh(); \n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"imageUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Image URL</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://example.com/image.png\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" asChild><Link href=\"/admin/gallery\">Cancel</Link></Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Adding...</> : \"Add Image\"}\n            </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":2479},"src/app/admin/gallery/create/page.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CreateImageForm } from \"./create-image-form\";\nimport { Footer } from \"@/components/app/footer\";\n\nexport default function CreateGalleryImagePage() {\n    return (\n        <div className=\"flex flex-col min-h-screen bg-background\">\n            <main className=\"flex-grow flex items-center justify-center p-4\">\n                <div className=\"max-w-2xl w-full\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Add New Gallery Image</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <CreateImageForm />\n                        </CardContent>\n                    </Card>\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","size_bytes":866},"src/app/admin/news/create/actions.ts":{"content":"'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { NewsData } from '@/lib/news-articles';\nimport type { ImagePlaceholder } from '@/lib/placeholder-images';\n\nconst formSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  author: z.string().min(1, 'Author is required'),\n  imageUrl: z.string().url('Must be a valid URL'),\n  description: z.string().min(1, 'Description is required'),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst newsFilePath = path.join(process.cwd(), 'src', 'lib', 'news-articles.json');\nconst imagesFilePath = path.join(process.cwd(), 'src', 'lib', 'placeholder-images.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    const fileContent = await fs.readFile(filePath, 'utf-8');\n    return JSON.parse(fileContent);\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function createNewsArticle(values: FormValues) {\n  const validation = formSchema.safeParse(values);\n  if (!validation.success) {\n    return { success: false, message: 'Invalid data provided.' };\n  }\n\n  try {\n    const newsData = await readJsonFile<NewsData>(newsFilePath);\n    const imagesData = await readJsonFile<{ placeholderImages: ImagePlaceholder[] }>(imagesFilePath);\n\n    const articleId = `newsletter-${Date.now()}`;\n\n    const newImage: ImagePlaceholder = {\n        id: articleId,\n        description: `Image for ${validation.data.title}`,\n        imageUrl: validation.data.imageUrl,\n        imageHint: \"custom article\",\n    };\n    imagesData.placeholderImages.unshift(newImage);\n    \n    const newArticle = {\n      id: articleId,\n      title: validation.data.title,\n      description: validation.data.description,\n      date: new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),\n      author: validation.data.author,\n      imageId: articleId,\n    };\n    newsData.newsletters.unshift(newArticle);\n\n    await writeJsonFile(newsFilePath, newsData);\n    await writeJsonFile(imagesFilePath, imagesData);\n    \n    revalidatePath('/admin/news');\n    revalidatePath('/');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error creating news article:', error);\n    return { success: false, message: 'Failed to write to data files.' };\n  }\n}\n","size_bytes":2455},"src/app/admin/news/create/create-news-form.tsx":{"content":"\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { createNewsArticle } from \"./actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst formSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  author: z.string().min(1, \"Author is required\"),\n  imageUrl: z.string().url(\"Must be a valid URL\"),\n  description: z.string().min(1, \"Description is required\"),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function CreateNewsForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title: \"\",\n      author: \"\",\n      imageUrl: \"\",\n      description: \"\",\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    const result = await createNewsArticle(values);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: \"Success\",\n        description: \"News article created successfully.\",\n      });\n      router.push(\"/admin/news\");\n      router.refresh(); // To see the new article in the list\n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Title</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter article title\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"author\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Author</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter author's name\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Enter a short description for the article\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"imageUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Banner Image URL</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://example.com/image.png\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" asChild>\n                <Link href=\"/admin/news\">Cancel</Link>\n            </Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Creating...</> : \"Create Article\"}\n            </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":4007},"src/app/admin/news/create/page.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CreateNewsForm } from \"./create-news-form\";\nimport { Footer } from \"@/components/app/footer\";\nimport Image from \"next/image\";\nimport { PlaceHolderImages } from \"@/lib/placeholder-images\";\n\nexport default function CreateNewsPage() {\n    const bannerImage = PlaceHolderImages.find(img => img.id === 'create-news-banner');\n\n    return (\n        <div className=\"flex flex-col min-h-screen bg-background\">\n            <main className=\"flex-grow\">\n                <div className=\"relative h-64 w-full\">\n                    {bannerImage && (\n                         <Image\n                            src={bannerImage.imageUrl}\n                            alt={bannerImage.description}\n                            fill\n                            className=\"object-cover\"\n                            data-ai-hint={bannerImage.imageHint}\n                        />\n                    )}\n                    <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                        <h1 className=\"text-4xl font-headline text-white\">Create a New Article</h1>\n                    </div>\n                </div>\n                <div className=\"max-w-2xl mx-auto p-4 md:p-8 -mt-16\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Article Details</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <CreateNewsForm />\n                        </CardContent>\n                    </Card>\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","size_bytes":1702},"src/app/admin/staff/create/actions.ts":{"content":"\n'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { StaffData, StaffMember } from '@/lib/staff-members';\n\nconst formSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  role: z.string().min(1, 'Role is required'),\n  imageUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  steamUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  truckersmpUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { staffMembers: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function createStaffMember(values: FormValues) {\n  const validation = formSchema.safeParse(values);\n  if (!validation.success) {\n    return { success: false, message: 'Invalid data provided.' };\n  }\n\n  try {\n    const staffData = await readJsonFile<StaffData>(staffFilePath);\n\n    const newMember: StaffMember = {\n      id: `staff-${Date.now()}`,\n      name: validation.data.name,\n      role: validation.data.role,\n      imageId: 'testimonial-avatar', // Default image\n      imageUrl: validation.data.imageUrl,\n      steamUrl: validation.data.steamUrl,\n      truckersmpUrl: validation.data.truckersmpUrl,\n    };\n    \n    staffData.staffMembers.push(newMember);\n\n    await writeJsonFile(staffFilePath, staffData);\n    \n    revalidatePath('/admin/staff');\n    revalidatePath('/staff');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error creating staff member:', error);\n    return { success: false, message: 'Failed to write to data file.' };\n  }\n}\n","size_bytes":2202},"src/app/admin/staff/create/create-staff-form.tsx":{"content":"\n\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { createStaffMember } from \"./actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst formSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  role: z.string().min(1, \"Role is required\"),\n  imageUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  steamUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  truckersmpUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst roleOptions = [\n    'Managing Director', 'Marketing Executive', 'Human Resource Staff', 'Trainer',\n    'Event Staff', 'Event Organizer', 'Media Staff', 'Media Editor',\n    'Senior Driver', 'Driver', 'Trainee'\n];\n\nexport function CreateStaffForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      role: \"\",\n      imageUrl: \"\",\n      steamUrl: \"\",\n      truckersmpUrl: \"\",\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    const result = await createStaffMember(values);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: \"Success\",\n        description: \"Staff member added successfully.\",\n      });\n      router.push(\"/admin/staff\");\n      router.refresh(); \n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter member's name\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"role\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Role</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a role\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {roleOptions.map(role => (\n                    <SelectItem key={role} value={role}>{role}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"imageUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Image URL (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://example.com/avatar.png\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"steamUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Steam URL (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://steamcommunity.com/id/...\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"truckersmpUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>TruckersMP URL (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://truckersmp.com/user/...\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" asChild><Link href=\"/admin/staff\">Cancel</Link></Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Adding...</> : \"Add Member\"}\n            </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":5106},"src/app/admin/staff/create/page.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CreateStaffForm } from \"./create-staff-form\";\nimport { Footer } from \"@/components/app/footer\";\n\nexport default function CreateStaffPage() {\n    return (\n        <div className=\"flex flex-col min-h-screen bg-background\">\n            <main className=\"flex-grow flex items-center justify-center p-4\">\n                <div className=\"max-w-2xl w-full\">\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Add New Staff Member</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <CreateStaffForm />\n                        </CardContent>\n                    </Card>\n                </div>\n            </main>\n            <Footer />\n        </div>\n    );\n}\n","size_bytes":858},"src/app/api/redirect/voice-chat/route.ts":{"content":"\nimport { NextResponse } from 'next/server';\n\nexport async function GET() {\n    // This could fetch a dynamic voice chat link from a database or API\n    const voiceChatUrl = 'https://discord.com/invite/paRCYhJphH';\n    return NextResponse.redirect(voiceChatUrl);\n}\n","size_bytes":265},"src/app/admin/events/edit/[id]/actions.ts":{"content":"\n'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { EventsData, Event } from '@/lib/events';\nimport type { ImagePlaceholder } from '@/lib/placeholder-images';\n\nexport type { Event };\n\nconst bookingSchema = z.object({\n  id: z.string(),\n  slotNumber: z.coerce.number(),\n  vtcName: z.string(),\n  status: z.enum(['approved', 'pending', 'rejected', 'hold']),\n});\n\nconst slotAreaSchema = z.object({\n  id: z.string(),\n  areaName: z.string().min(1, 'Area name is required'),\n  imageUrl: z.string().url('Image URL must be a valid URL'),\n  startSlot: z.coerce.number().min(1, 'Start slot must be at least 1'),\n  endSlot: z.coerce.number().min(1, 'End slot must be at least 1'),\n  bookings: z.array(bookingSchema),\n}).refine(data => data.endSlot >= data.startSlot, {\n    message: \"End slot must be greater than or equal to start slot\",\n    path: [\"endSlot\"],\n});\n\nconst timeSchema = z.object({\n  hour: z.string().min(1, { message: 'HH' }),\n  minute: z.string().min(1, { message: 'MM' }),\n  timezone: z.string().min(1, { message: 'Zone' })\n});\n\nconst formSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  eventDate: z.date({ required_error: \"An event date is required.\" }),\n  imageUrl: z.string().url('Must be a valid URL'),\n  url: z.string().url('Must be a valid URL'),\n  routeMapUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  type: z.enum(['internal', 'partner']),\n  departure: z.string().min(1, 'Departure location is required'),\n  arrival: z.string().min(1, 'Arrival location is required'),\n  server: z.string().min(1, 'Server is required'),\n  meetupTime: timeSchema,\n  departureTime: timeSchema,\n  description: z.string().min(1, 'Description is required'),\n  rules: z.string().min(1, 'Rules are required'),\n  slots: z.array(slotAreaSchema).optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst eventsFilePath = path.join(process.cwd(), 'src', 'lib', 'events.json');\nconst imagesFilePath = path.join(process.cwd(), 'src', 'lib', 'placeholder-images.json');\n\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            if (filePath.includes('events.json')) return { events: [] } as any;\n            if (filePath.includes('placeholder-images.json')) return { placeholderImages: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport type EventWithImageUrl = Event & { imageUrl: string };\n\nexport async function getEvent(id: string): Promise<EventWithImageUrl | undefined> {\n    const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n    const event = eventsData.events.find((e) => e.id === id);\n\n    if (!event) return undefined;\n    \n    const imagesData = await readJsonFile<{ placeholderImages: ImagePlaceholder[] }>(imagesFilePath);\n    const image = imagesData.placeholderImages.find(img => img.id === event.imageId);\n    \n    return {\n        ...event,\n        imageUrl: image?.imageUrl || '',\n    };\n}\n\nconst formatDateTime = (date: Date, time: z.infer<typeof timeSchema>): string => {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    return `${day}.${month}.${year} | ${time.hour}:${time.minute} ${time.timezone}`;\n};\n\nexport async function updateEvent(id: string, values: FormValues) {\n  const validation = formSchema.safeParse(values);\n  if (!validation.success) {\n    console.error(validation.error.flatten().fieldErrors)\n    return { success: false, message: 'Invalid data provided.' };\n  }\n\n  try {\n    const eventsData = await readJsonFile<EventsData>(eventsFilePath);\n    const imagesData = await readJsonFile<{ placeholderImages: ImagePlaceholder[] }>(imagesFilePath);\n    \n    const eventIndex = eventsData.events.findIndex((e) => e.id === id);\n    if (eventIndex === -1) {\n        return { success: false, message: 'Event not found.' };\n    }\n\n    const { eventDate, meetupTime, departureTime, imageUrl, ...restOfData } = validation.data;\n\n    eventsData.events[eventIndex] = {\n        ...eventsData.events[eventIndex],\n        ...restOfData,\n        date: formatDateTime(eventDate, meetupTime),\n        meetupTime: formatDateTime(eventDate, meetupTime),\n        departureTime: formatDateTime(eventDate, departureTime),\n        slots: validation.data.slots || [],\n    };\n    \n    const imageIndex = imagesData.placeholderImages.findIndex(img => img.id === eventsData.events[eventIndex].imageId);\n    if (imageIndex !== -1) {\n        imagesData.placeholderImages[imageIndex].imageUrl = imageUrl;\n        imagesData.placeholderImages[imageIndex].description = `Image for ${validation.data.title}`;\n    }\n\n    await writeJsonFile(eventsFilePath, eventsData);\n    await writeJsonFile(imagesFilePath, imagesData);\n\n    revalidatePath('/admin/events');\n    revalidatePath(`/admin/events/edit/${id}`);\n    revalidatePath('/events');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error updating event:', error);\n    return { success: false, message: 'Failed to write to data file.' };\n  }\n}\n","size_bytes":5480},"src/app/admin/events/edit/[id]/edit-event-form.tsx":{"content":"\n\"use client\";\n\nimport { useForm, useFieldArray, useWatch } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { updateEvent, type EventWithImageUrl } from \"./actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { CalendarIcon, Eye, Loader2, PlusCircle, Trash2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\nimport { format } from \"date-fns\";\n\nconst bookingSchema = z.object({\n  id: z.string(),\n  slotNumber: z.coerce.number(),\n  vtcName: z.string(),\n  status: z.enum(['approved', 'pending', 'rejected', 'hold']),\n});\n\nconst slotAreaSchema = z.object({\n  id: z.string(),\n  areaName: z.string().min(1, 'Area name is required'),\n  imageUrl: z.string().url('Image URL must be a valid URL'),\n  startSlot: z.coerce.number().min(1, 'Start slot must be at least 1'),\n  endSlot: z.coerce.number().min(1, 'End slot must be at least 1'),\n  bookings: z.array(bookingSchema),\n}).refine(data => data.endSlot >= data.startSlot, {\n    message: \"End slot must be greater than or equal to start slot\",\n    path: [\"endSlot\"],\n});\n\nconst timeSchema = z.object({\n  hour: z.string().min(1, { message: 'HH' }).max(2),\n  minute: z.string().min(1, { message: 'MM' }).max(2),\n  timezone: z.string().min(1, { message: 'Zone' })\n});\n\nconst formSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  eventDate: z.date({ required_error: \"An event date is required.\" }),\n  imageUrl: z.string().url('Must be a valid URL'),\n  url: z.string().url('Must be a valid URL'),\n  routeMapUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  type: z.enum(['internal', 'partner']),\n  departure: z.string().min(1, 'Departure location is required'),\n  arrival: z.string().min(1, 'Arrival location is required'),\n  server: z.string().min(1, 'Server is required'),\n  meetupTime: timeSchema,\n  departureTime: timeSchema,\n  description: z.string().min(1, 'Description is required'),\n  rules: z.string().min(1, 'Rules are required'),\n  slots: z.array(slotAreaSchema).optional(),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\n// Helper to parse the date/time string from events.json\nconst parseDateTime = (dateTimeStr: string): { date: Date, time: z.infer<typeof timeSchema> } => {\n    try {\n        const [datePart, timePart] = dateTimeStr.split(' | ');\n        const [day, month, year] = datePart.split('.').map(Number);\n        \n        const [time, timezone] = timePart.split(' ');\n        const [hour, minute] = time.split(':');\n\n        return {\n            date: new Date(year, month - 1, day),\n            time: { hour, minute, timezone }\n        };\n    } catch (e) {\n         // Fallback for just date or invalid format\n        try {\n            const [day, month, year] = dateTimeStr.split('.').map(Number);\n            return {\n                date: new Date(year, month - 1, day),\n                time: { hour: '13', minute: '00', timezone: 'UTC' }\n            }\n        } catch {\n            return {\n                date: new Date(),\n                time: { hour: '13', minute: '00', timezone: 'UTC' }\n            }\n        }\n    }\n}\n\n\nexport function EditEventForm({ event }: { event: EventWithImageUrl }) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const parsedMeetup = parseDateTime(event.meetupTime);\n  const parsedDeparture = parseDateTime(event.departureTime);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      ...event,\n      routeMapUrl: event.routeMapUrl || '',\n      eventDate: parsedMeetup.date,\n      meetupTime: parsedMeetup.time,\n      departureTime: parsedDeparture.time,\n      slots: event.slots?.map(s => ({...s, bookings: s.bookings || []})) || [],\n    },\n  });\n  \n  const imageUrlValue = useWatch({\n    control: form.control,\n    name: \"imageUrl\",\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"slots\",\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    const result = await updateEvent(event.id, values);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: \"Success\",\n        description: \"Event details updated successfully.\",\n      });\n      router.push(\"/admin/events\");\n      router.refresh(); \n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n       <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField control={form.control} name=\"title\" render={({ field }) => ( <FormItem> <FormLabel>Event Title</FormLabel> <FormControl><Input placeholder=\"Enter event title\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n          <FormField\n              control={form.control}\n              name=\"eventDate\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel>Event Date</FormLabel>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <FormControl>\n                        <Button\n                          variant={\"outline\"}\n                          className={cn(\n                            \"w-full pl-3 text-left font-normal\",\n                            !field.value && \"text-muted-foreground\"\n                          )}\n                        >\n                          {field.value ? (\n                            format(field.value, \"PPP\")\n                          ) : (\n                            <span>Pick a date</span>\n                          )}\n                          <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                        </Button>\n                      </FormControl>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={field.value}\n                        onSelect={field.onChange}\n                        disabled={(date) => date < new Date(\"1900-01-01\")}\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormField control={form.control} name=\"imageUrl\" render={({ field }) => ( <FormItem> <div className=\"flex justify-between items-center\"> <FormLabel>Event Image URL</FormLabel> {imageUrlValue && ( <Link href={imageUrlValue} target=\"_blank\" className=\"text-sm text-primary hover:underline flex items-center gap-1\"><Eye size={16}/>View</Link> )} </div> <FormControl><Input placeholder=\"https://example.com/image.png\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n            <FormField control={form.control} name=\"url\" render={({ field }) => ( <FormItem> <FormLabel>Event URL</FormLabel> <FormControl><Input placeholder=\"https://truckersmp.com/...\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n        </div>\n         <FormField control={form.control} name=\"routeMapUrl\" render={({ field }) => ( <FormItem> <FormLabel>Route Map URL (Optional)</FormLabel> <FormControl><Input placeholder=\"https://example.com/route.png\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField control={form.control} name=\"type\" render={({ field }) => ( <FormItem> <FormLabel>Event Type</FormLabel> <Select onValueChange={field.onChange} defaultValue={field.value}> <FormControl><SelectTrigger><SelectValue placeholder=\"Select event type\" /></SelectTrigger></FormControl> <SelectContent> <SelectItem value=\"internal\">Internal</SelectItem> <SelectItem value=\"partner\">Partner</SelectItem> </SelectContent> </Select> <FormMessage /> </FormItem> )}/>\n          <FormField control={form.control} name=\"server\" render={({ field }) => ( <FormItem> <FormLabel>Server</FormLabel> <FormControl><Input placeholder=\"e.g., Event Server\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <FormField control={form.control} name=\"departure\" render={({ field }) => ( <FormItem> <FormLabel>Departure</FormLabel> <FormControl><Input placeholder=\"e.g., Bremen\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n          <FormField control={form.control} name=\"arrival\" render={({ field }) => ( <FormItem> <FormLabel>Arrival</FormLabel> <FormControl><Input placeholder=\"e.g., Prague\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <FormItem>\n                <FormLabel>Meetup Time</FormLabel>\n                <div className=\"flex items-center gap-2\">\n                    <FormField control={form.control} name=\"meetupTime.hour\" render={({ field }) => (<FormItem><FormControl><Input placeholder=\"HH\" {...field} /></FormControl></FormItem>)}/>\n                    <span>:</span>\n                    <FormField control={form.control} name=\"meetupTime.minute\" render={({ field }) => (<FormItem><FormControl><Input placeholder=\"MM\" {...field} /></FormControl></FormItem>)}/>\n                    <FormField control={form.control} name=\"meetupTime.timezone\" render={({ field }) => (<FormItem><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger><SelectValue/></SelectTrigger></FormControl><SelectContent><SelectItem value=\"UTC\">UTC</SelectItem><SelectItem value=\"IST\">IST</SelectItem><SelectItem value=\"CET\">CET</SelectItem></SelectContent></Select></FormItem>)}/>\n                </div>\n                 <FormMessage>\n                    {form.formState.errors.meetupTime?.hour?.message || form.formState.errors.meetupTime?.minute?.message || form.formState.errors.meetupTime?.timezone?.message}\n                </FormMessage>\n            </FormItem>\n             <FormItem>\n                <FormLabel>Departure Time</FormLabel>\n                <div className=\"flex items-center gap-2\">\n                    <FormField control={form.control} name=\"departureTime.hour\" render={({ field }) => (<FormItem><FormControl><Input placeholder=\"HH\" {...field} /></FormControl></FormItem>)}/>\n                    <span>:</span>\n                    <FormField control={form.control} name=\"departureTime.minute\" render={({ field }) => (<FormItem><FormControl><Input placeholder=\"MM\" {...field} /></FormControl></FormItem>)}/>\n                    <FormField control={form.control} name=\"departureTime.timezone\" render={({ field }) => (<FormItem><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger><SelectValue/></SelectTrigger></FormControl><SelectContent><SelectItem value=\"UTC\">UTC</SelectItem><SelectItem value=\"IST\">IST</SelectItem><SelectItem value=\"CET\">CET</SelectItem></SelectContent></Select></FormItem>)}/>\n                </div>\n                 <FormMessage>\n                    {form.formState.errors.departureTime?.hour?.message || form.formState.errors.departureTime?.minute?.message || form.formState.errors.departureTime?.timezone?.message}\n                </FormMessage>\n            </FormItem>\n        </div>\n        <FormField control={form.control} name=\"description\" render={({ field }) => ( <FormItem> <FormLabel>Description</FormLabel> <FormControl><Textarea placeholder=\"Enter a description for the event\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n        <FormField control={form.control} name=\"rules\" render={({ field }) => ( <FormItem> <FormLabel>Rules</FormLabel> <FormControl><Textarea placeholder=\"Enter the rules for the event\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n        \n        <Card>\n            <CardHeader>\n                <CardTitle>Event Slots</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n                {fields.map((field, index) => (\n                    <Card key={field.id} className=\"p-4 relative\">\n                        <div className=\"space-y-4\">\n                            <FormField control={form.control} name={`slots.${index}.areaName`} render={({ field }) => ( <FormItem> <FormLabel>Area Name</FormLabel> <FormControl><Input placeholder=\"e.g., Main Parking\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n                             <div className=\"grid grid-cols-2 gap-4\">\n                                <FormField control={form.control} name={`slots.${index}.startSlot`} render={({ field }) => ( <FormItem> <FormLabel>Start Slot</FormLabel> <FormControl><Input type=\"number\" placeholder=\"e.g., 1\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n                                <FormField control={form.control} name={`slots.${index}.endSlot`} render={({ field }) => ( <FormItem> <FormLabel>End Slot</FormLabel> <FormControl><Input type=\"number\" placeholder=\"e.g., 10\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n                            </div>\n                            <FormField control={form.control} name={`slots.${index}.imageUrl`} render={({ field }) => ( <FormItem> <FormLabel>Image URL</FormLabel> <FormControl><Input placeholder=\"https://example.com/slot-map.png\" {...field} /></FormControl> <FormMessage /> </FormItem> )}/>\n                        </div>\n                        <Button type=\"button\" variant=\"destructive\" size=\"icon\" className=\"absolute top-2 right-2\" onClick={() => remove(index)}>\n                            <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                    </Card>\n                ))}\n                <Button type=\"button\" variant=\"outline\" onClick={() => append({ id: `slot-area-${Date.now()}`, areaName: '', imageUrl: '', startSlot: 1, endSlot: 10, bookings: [] })}>\n                    <PlusCircle className=\"mr-2 h-4 w-4\" />\n                    Add Slot Area\n                </Button>\n            </CardContent>\n        </Card>\n\n        <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" asChild><Link href=\"/admin/events\">Cancel</Link></Button>\n            <Button type=\"submit\" disabled={isSubmitting}>{isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Saving...</> : \"Save Changes\"}</Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\n    ","size_bytes":15442},"src/app/admin/events/edit/[id]/page.tsx":{"content":"\nimport { getEvent } from './actions';\nimport { EditEventForm } from './edit-event-form';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Footer } from '@/components/app/footer';\nimport { notFound } from 'next/navigation';\n\nexport default async function EditEventPage({ params }: { params: { id: string } }) {\n  const event = await getEvent(params.id);\n\n  if (!event) {\n    notFound();\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <main className=\"flex-grow flex items-center justify-center p-4\">\n        <div className=\"max-w-2xl w-full\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>Edit Event Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <EditEventForm event={event} />\n                </CardContent>\n            </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":959},"src/app/admin/gallery/edit/[id]/actions.ts":{"content":"\n'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { GalleryData, GalleryImage } from '@/lib/gallery-images';\n\nexport type { GalleryImage };\n\nconst formSchema = z.object({\n  imageUrl: z.string().url('Must be a valid URL'),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst galleryFilePath = path.join(process.cwd(), 'src', 'lib', 'gallery-images.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { galleryImages: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function getGalleryImage(id: string): Promise<GalleryImage | undefined> {\n    const galleryData = await readJsonFile<GalleryData>(galleryFilePath);\n    const image = galleryData.galleryImages.find((img) => img.id === id);\n    return image;\n}\n\nexport async function updateGalleryImage(id: string, values: FormValues) {\n  const validation = formSchema.safeParse(values);\n  if (!validation.success) {\n    return { success: false, message: 'Invalid data provided.' };\n  }\n\n  try {\n    const galleryData = await readJsonFile<GalleryData>(galleryFilePath);\n    \n    const imageIndex = galleryData.galleryImages.findIndex((img) => img.id === id);\n    if (imageIndex === -1) {\n        return { success: false, message: 'Image not found.' };\n    }\n\n    galleryData.galleryImages[imageIndex] = {\n        ...galleryData.galleryImages[imageIndex],\n        imageUrl: validation.data.imageUrl,\n    };\n\n    await writeJsonFile(galleryFilePath, galleryData);\n\n    revalidatePath('/admin/gallery');\n    revalidatePath(`/admin/gallery/edit/${id}`);\n    revalidatePath('/gallery');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error updating gallery image:', error);\n    return { success: false, message: 'Failed to write to data file.' };\n  }\n}\n","size_bytes":2233},"src/app/admin/gallery/edit/[id]/edit-image-form.tsx":{"content":"\n\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { updateGalleryImage, type GalleryImage } from \"./actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\n\nconst formSchema = z.object({\n  imageUrl: z.string().url(\"Must be a valid URL\"),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function EditImageForm({ image }: { image: GalleryImage }) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      imageUrl: image.imageUrl,\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    const result = await updateGalleryImage(image.id, values);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: \"Success\",\n        description: \"Image details updated successfully.\",\n      });\n      router.push(\"/admin/gallery\");\n      router.refresh(); \n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"imageUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Image URL</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://example.com/image.png\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" asChild>\n                <Link href=\"/admin/gallery\">Cancel</Link>\n            </Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Saving...</> : \"Save Changes\"}\n            </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":2534},"src/app/admin/gallery/edit/[id]/page.tsx":{"content":"\nimport { getGalleryImage } from './actions';\nimport { EditImageForm } from './edit-image-form';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Footer } from '@/components/app/footer';\nimport { notFound } from 'next/navigation';\n\nexport default async function EditGalleryImagePage({ params }: { params: { id: string } }) {\n  const image = await getGalleryImage(params.id);\n\n  if (!image) {\n    notFound();\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <main className=\"flex-grow flex items-center justify-center p-4\">\n        <div className=\"max-w-2xl w-full\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>Edit Image Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <EditImageForm image={image} />\n                </CardContent>\n            </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":980},"src/app/admin/news/edit/[id]/actions.ts":{"content":"'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { NewsArticle, NewsData } from '@/lib/news-articles';\nimport type { ImagePlaceholder } from '@/lib/placeholder-images';\n\nconst formSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  author: z.string().min(1, 'Author is required'),\n  imageUrl: z.string().url('Must be a valid URL'),\n  description: z.string().min(1, 'Description is required'),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\nexport type NewsArticleWithImage = NewsArticle & { imageUrl: string };\n\n\nconst newsFilePath = path.join(process.cwd(), 'src', 'lib', 'news-articles.json');\nconst imagesFilePath = path.join(process.cwd(), 'src', 'lib', 'placeholder-images.json');\n\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    const fileContent = await fs.readFile(filePath, 'utf-8');\n    return JSON.parse(fileContent);\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function getNewsArticle(id: string): Promise<NewsArticleWithImage | undefined> {\n    const newsData = await readJsonFile<NewsData>(newsFilePath);\n    const article = newsData.newsletters.find((article) => article.id === id);\n\n    if (!article) return undefined;\n\n    const imagesData = await readJsonFile<{ placeholderImages: ImagePlaceholder[] }>(imagesFilePath);\n    const image = imagesData.placeholderImages.find(img => img.id === article.imageId);\n\n    return {\n        ...article,\n        imageUrl: image?.imageUrl || '',\n    };\n}\n\nexport async function updateNewsArticle(id: string, values: FormValues) {\n  const validation = formSchema.safeParse(values);\n  if (!validation.success) {\n    return { success: false, message: 'Invalid data provided.' };\n  }\n\n  try {\n    const newsData = await readJsonFile<NewsData>(newsFilePath);\n    const imagesData = await readJsonFile<{ placeholderImages: ImagePlaceholder[] }>(imagesFilePath);\n    \n    const articleIndex = newsData.newsletters.findIndex((article) => article.id === id);\n    if (articleIndex === -1) {\n        return { success: false, message: 'Article not found.' };\n    }\n\n    // Update article details\n    newsData.newsletters[articleIndex] = {\n        ...newsData.newsletters[articleIndex],\n        title: validation.data.title,\n        author: validation.data.author,\n        description: validation.data.description,\n    };\n\n    // Update image details\n    const imageIndex = imagesData.placeholderImages.findIndex(img => img.id === newsData.newsletters[articleIndex].imageId);\n    if (imageIndex !== -1) {\n        imagesData.placeholderImages[imageIndex].imageUrl = validation.data.imageUrl;\n        imagesData.placeholderImages[imageIndex].description = `Image for ${validation.data.title}`;\n    }\n\n    await writeJsonFile(newsFilePath, newsData);\n    await writeJsonFile(imagesFilePath, imagesData);\n\n    revalidatePath('/admin/news');\n    revalidatePath('/');\n    revalidatePath(`/admin/news/edit/${id}`);\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error updating news article:', error);\n    return { success: false, message: 'Failed to write to data files.' };\n  }\n}\n","size_bytes":3304},"src/app/admin/news/edit/[id]/edit-news-form.tsx":{"content":"\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { updateNewsArticle, type NewsArticleWithImage } from \"./actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst formSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  author: z.string().min(1, \"Author is required\"),\n  imageUrl: z.string().url(\"Must be a valid URL\"),\n  description: z.string().min(1, \"Description is required\"),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function EditNewsForm({ article }: { article: NewsArticleWithImage }) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title: article.title,\n      author: article.author,\n      imageUrl: article.imageUrl,\n      description: article.description,\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    const result = await updateNewsArticle(article.id, values);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: \"Success\",\n        description: \"News article updated successfully.\",\n      });\n      router.push(\"/admin/news\");\n      router.refresh(); \n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Title</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter article title\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"author\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Author</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter author's name\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Enter a short description for the article\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"imageUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Banner Image URL</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://example.com/image.png\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" asChild>\n                <Link href=\"/admin/news\">Cancel</Link>\n            </Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Saving...</> : \"Save Changes\"}\n            </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":4103},"src/app/admin/news/edit/[id]/page.tsx":{"content":"import { getNewsArticle } from './actions';\nimport { EditNewsForm } from './edit-news-form';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Footer } from '@/components/app/footer';\nimport Image from 'next/image';\nimport { PlaceHolderImages } from '@/lib/placeholder-images';\nimport { notFound } from 'next/navigation';\n\nexport default async function EditNewsPage({ params }: { params: { id: string } }) {\n  const article = await getNewsArticle(params.id);\n\n  if (!article) {\n    notFound();\n  }\n\n  const bannerImage = PlaceHolderImages.find(img => img.id === 'create-news-banner');\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <main className=\"flex-grow\">\n        <div className=\"relative h-64 w-full\">\n            {bannerImage && (\n                <Image\n                src={bannerImage.imageUrl}\n                alt={bannerImage.description}\n                fill\n                className=\"object-cover\"\n                data-ai-hint={bannerImage.imageHint}\n                />\n            )}\n            <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                <h1 className=\"text-4xl font-headline text-white\">Edit Article</h1>\n            </div>\n        </div>\n        <div className=\"max-w-2xl mx-auto p-4 md:p-8 -mt-16\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>Article Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <EditNewsForm article={article} />\n                </CardContent>\n            </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1682},"src/app/admin/staff/edit/[id]/actions.ts":{"content":"\n'use server';\n\nimport { z } from 'zod';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport type { StaffData, StaffMember } from '@/lib/staff-members';\n\nexport type { StaffMember };\n\nconst formSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  role: z.string().min(1, 'Role is required'),\n  imageUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  steamUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  truckersmpUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst staffFilePath = path.join(process.cwd(), 'src', 'lib', 'staff-members.json');\n\nasync function readJsonFile<T>(filePath: string): Promise<T> {\n    try {\n        const fileContent = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(fileContent);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { staffMembers: [] } as any;\n        }\n        throw error;\n    }\n}\n\nasync function writeJsonFile(filePath: string, data: any): Promise<void> {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n}\n\nexport async function getStaffMember(id: string): Promise<StaffMember | undefined> {\n    const staffData = await readJsonFile<StaffData>(staffFilePath);\n    const member = staffData.staffMembers.find((m) => m.id === id);\n    return member;\n}\n\nexport async function updateStaffMember(id: string, values: FormValues) {\n  const validation = formSchema.safeParse(values);\n  if (!validation.success) {\n    return { success: false, message: 'Invalid data provided.' };\n  }\n\n  try {\n    const staffData = await readJsonFile<StaffData>(staffFilePath);\n    \n    const memberIndex = staffData.staffMembers.findIndex((m) => m.id === id);\n    if (memberIndex === -1) {\n        return { success: false, message: 'Staff member not found.' };\n    }\n\n    staffData.staffMembers[memberIndex] = {\n        ...staffData.staffMembers[memberIndex],\n        name: validation.data.name,\n        role: validation.data.role,\n        imageUrl: validation.data.imageUrl,\n        steamUrl: validation.data.steamUrl,\n        truckersmpUrl: validation.data.truckersmpUrl,\n    };\n\n    await writeJsonFile(staffFilePath, staffData);\n\n    revalidatePath('/admin/staff');\n    revalidatePath(`/admin/staff/edit/${id}`);\n    revalidatePath('/staff');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error updating staff member:', error);\n    return { success: false, message: 'Failed to write to data file.' };\n  }\n}\n","size_bytes":2649},"src/app/admin/staff/edit/[id]/edit-staff-form.tsx":{"content":"\n\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { updateStaffMember, type StaffMember } from \"./actions\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst formSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  role: z.string().min(1, \"Role is required\"),\n  imageUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  steamUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n  truckersmpUrl: z.string().url('Must be a valid URL').optional().or(z.literal('')),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nconst roleOptions = [\n    'Managing Director', 'Marketing Executive', 'Human Resource Staff', 'Trainer',\n    'Event Staff', 'Event Organizer', 'Media Staff', 'Media Editor',\n    'Senior Driver', 'Driver', 'Trainee'\n];\n\nexport function EditStaffForm({ member }: { member: StaffMember }) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: member.name,\n      role: member.role,\n      imageUrl: member.imageUrl || \"\",\n      steamUrl: member.steamUrl || \"\",\n      truckersmpUrl: member.truckersmpUrl || \"\",\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsSubmitting(true);\n    const result = await updateStaffMember(member.id, values);\n    setIsSubmitting(false);\n\n    if (result.success) {\n      toast({\n        title: \"Success\",\n        description: \"Staff member details updated successfully.\",\n      });\n      router.push(\"/admin/staff\");\n      router.refresh(); \n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n      });\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter member's name\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"role\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Role</FormLabel>\n               <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a role\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {roleOptions.map(role => (\n                    <SelectItem key={role} value={role}>{role}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"imageUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Image URL (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://example.com/avatar.png\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"steamUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Steam URL (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://steamcommunity.com/id/...\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"truckersmpUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>TruckersMP URL (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://truckersmp.com/user/...\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <div className=\"flex justify-end gap-4\">\n            <Button variant=\"outline\" asChild><Link href=\"/admin/staff\">Cancel</Link></Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />Saving...</> : \"Save Changes\"}\n            </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":5261},"src/app/admin/staff/edit/[id]/page.tsx":{"content":"\nimport { getStaffMember } from './actions';\nimport { EditStaffForm } from './edit-staff-form';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Footer } from '@/components/app/footer';\nimport { notFound } from 'next/navigation';\n\nexport default async function EditStaffPage({ params }: { params: { id: string } }) {\n  const member = await getStaffMember(params.id);\n\n  if (!member) {\n    notFound();\n  }\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-background\">\n      <main className=\"flex-grow flex items-center justify-center p-4\">\n        <div className=\"max-w-2xl w-full\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>Edit Staff Member Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <EditStaffForm member={member} />\n                </CardContent>\n            </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":982}},"version":1}